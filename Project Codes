{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MehmetAgkale/Car-Crash-Detection/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u058jqoGQtwl"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "qZRhh7mOFsBH"
      },
      "outputs": [],
      "source": [
        "# This Python 3 environment comes with many helpful analytics libraries installed\n",
        "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
        "# For example, here's several helpful packages to load\n",
        "\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "\n",
        "# Input data files are available in the read-only \"../input/\" directory\n",
        "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))\n",
        "\n",
        "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\"\n",
        "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "8P1tLOzgN6EY"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "JcenUxm3N6cR"
      },
      "outputs": [],
      "source": [
        "batch_size = 100\n",
        "img_height = 250\n",
        "img_width = 250"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XiPThm3lWw7g"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "jhY0zsXbR2mu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e38f2b24-10fb-4222-c0b2-281fe451d773"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Directory: /content/data\n",
            "Directory: /content/data/test\n",
            "Directory: /content/data/test/Non Accident\n",
            " - 5_23.jpg\n",
            " - test4_10.jpg\n",
            " - test19_15.jpg\n",
            " - test7_39.jpg\n",
            " - test25_21.jpg\n",
            " - test25_1.jpg\n",
            " - test18_5.jpg\n",
            " - test12_1.jpg\n",
            " - test4_4.jpg\n",
            " - test10_5.jpg\n",
            " - test28_4.jpg\n",
            " - test3_18.jpg\n",
            " - test15_20.jpg\n",
            " - test29_6.jpg\n",
            " - Pictures - Shortcut.lnk\n",
            " - test28_10.jpg\n",
            " - test4_53.jpg\n",
            " - test28_1.jpg\n",
            " - test14_2.jpg\n",
            " - test3_21.jpg\n",
            " - test3_12.jpg\n",
            " - test29_7.jpg\n",
            " - test28_5.jpg\n",
            " - test28_6.jpg\n",
            " - test15_29.jpg\n",
            " - test29_3.jpg\n",
            " - test4_6.jpg\n",
            " - test8_11.jpg\n",
            " - test_2.jpg\n",
            " - test7_38.jpg\n",
            " - test18_15.jpg\n",
            " - test1_9.jpg\n",
            " - test11_12.jpg\n",
            " - test7_22.jpg\n",
            " - test27_5.jpg\n",
            " - test3_40.jpg\n",
            " - test29_19.jpg\n",
            " - test9_20.jpg\n",
            " - test8_22.jpg\n",
            " - test1_8.jpg\n",
            " - test22_3.jpg\n",
            " - test26_5.jpg\n",
            " - test4_11.jpg\n",
            " - test17_12.jpg\n",
            " - test11_14.jpg\n",
            " - test16_4.jpg\n",
            " - test22_4.jpg\n",
            " - test7_10.jpg\n",
            " - test4_60.jpg\n",
            " - test11_6.jpg\n",
            " - test4_28.jpg\n",
            " - test8_3.jpg\n",
            " - test28_3.jpg\n",
            " - test4_9.jpg\n",
            "Directory: /content/data/test/Accident\n",
            " - test1_20.jpg\n",
            " - test1_18.jpg\n",
            " - test27_25.jpg\n",
            " - test2_10.jpg\n",
            " - test5_12.jpg\n",
            " - test10_61.jpg\n",
            " - test28_20.jpg\n",
            " - test24_30.jpg\n",
            " - test18_22.jpg\n",
            " - test21_10.jpg\n",
            " - test2_4.jpg\n",
            " - test5_14.jpg\n",
            " - test7_25.jpg\n",
            " - acc1 (7).jpg\n",
            " - test23_19.jpg\n",
            " - test4_37.jpg\n",
            " - test18_24.jpg\n",
            " - test27_34.jpg\n",
            " - test1_24.jpg\n",
            " - test21_20.jpg\n",
            " - test25_24.jpg\n",
            " - test27_13.jpg\n",
            " - test26_30.jpg\n",
            " - test4_42.jpg\n",
            " - test_33.jpg\n",
            " - test4_40.jpg\n",
            " - test2_1.jpg\n",
            " - test28_26.jpg\n",
            " - test1_27.jpg\n",
            " - test21_18.jpg\n",
            " - test19_26.jpg\n",
            " - test21_14.jpg\n",
            " - test10_56.jpg\n",
            " - test2_16.jpg\n",
            " - test12_13.jpg\n",
            " - test12_16.jpg\n",
            " - test3_32.jpg\n",
            " - test10_33.jpg\n",
            " - test1_26.jpg\n",
            " - test4_43.jpg\n",
            " - test28_23.jpg\n",
            " - test22_23.jpg\n",
            " - test15_15.jpg\n",
            " - test2_7.jpg\n",
            " - test26_23.jpg\n",
            " - test30_8.jpg\n",
            " - test13_22.jpg\n",
            "Directory: /content/data/test/.ipynb_checkpoints\n",
            "Directory: /content/data/val\n",
            "Directory: /content/data/val/Non Accident\n",
            " - test25_5.jpg\n",
            " - test29_22.jpg\n",
            " - test22_17.jpg\n",
            " - test29_18.jpg\n",
            " - test8_9.jpg\n",
            " - test9_8.jpg\n",
            " - test22_19.jpg\n",
            " - test9_12.jpg\n",
            " - 5_16.jpg\n",
            " - test15_27.jpg\n",
            " - test26_2.jpg\n",
            " - test_22.jpg\n",
            " - test30_5.jpg\n",
            " - test16_12.jpg\n",
            " - test10_3.jpg\n",
            " - test24_13.jpg\n",
            " - test4_14.jpg\n",
            " - test24_8.jpg\n",
            " - test_17.jpg\n",
            " - test18_6.jpg\n",
            " - test8_23.jpg\n",
            " - test10_1.jpg\n",
            " - test26_8.jpg\n",
            " - test7_37.jpg\n",
            " - test28_13.jpg\n",
            " - test25_10.jpg\n",
            " - test9_15.jpg\n",
            " - 5_22.jpg\n",
            " - test17_29.jpg\n",
            " - test4_57.jpg\n",
            " - test15_18.jpg\n",
            " - 5_26.jpg\n",
            " - test14_5.jpg\n",
            " - test26_11.jpg\n",
            " - test14_3.jpg\n",
            " - test24_1.jpg\n",
            " - test28_14.jpg\n",
            " - test4_19.jpg\n",
            " - test3_5.jpg\n",
            " - test4_2.jpg\n",
            " - test8_24.jpg\n",
            " - test18_12.jpg\n",
            " - test9_6.jpg\n",
            " - test25_17.jpg\n",
            " - test4_5.jpg\n",
            " - test7_1.jpg\n",
            " - test7_43.jpg\n",
            " - test20_7.jpg\n",
            " - test4_21.jpg\n",
            " - test25_22.jpg\n",
            " - test11_49.jpg\n",
            " - test3_25.jpg\n",
            "Directory: /content/data/val/Accident\n",
            " - test10_34.jpg\n",
            " - test28_31.jpg\n",
            " - test27_18.jpg\n",
            " - test30_13.jpg\n",
            " - test_30.jpg\n",
            " - test27_9.jpg\n",
            " - test18_25.jpg\n",
            " - test27_35.jpg\n",
            " - test7_32.jpg\n",
            " - acc1 (4).jpg\n",
            " - test3_26.jpg\n",
            " - test14_19.jpg\n",
            " - test_37.jpg\n",
            " - test10_27.jpg\n",
            " - test22_27.jpg\n",
            " - test16_28.jpg\n",
            " - test15_9.jpg\n",
            " - test26_26.jpg\n",
            " - test10_54.jpg\n",
            " - test26_22.jpg\n",
            " - test26_15.jpg\n",
            " - test24_41.jpg\n",
            " - test_35.jpg\n",
            " - test14_11.jpg\n",
            " - test2_23.jpg\n",
            " - test26_12.jpg\n",
            " - test29_15.jpg\n",
            " - test13_18.jpg\n",
            " - test23_18.jpg\n",
            " - test_26.jpg\n",
            " - test28_18.jpg\n",
            " - test_45.jpg\n",
            " - test13_20.jpg\n",
            " - test10_22.jpg\n",
            " - test23_15.jpg\n",
            " - test25_31.jpg\n",
            " - acc1 (6).jpg\n",
            " - test27_21.jpg\n",
            " - test10_23.jpg\n",
            " - test10_36.jpg\n",
            " - test27_26.jpg\n",
            " - test4_47.jpg\n",
            " - test28_29.jpg\n",
            " - test21_22.jpg\n",
            " - test_41.jpg\n",
            " - test27_17.jpg\n",
            "Directory: /content/data/train\n",
            "Directory: /content/data/train/Non Accident\n",
            " - test19_12.jpg\n",
            " - test7_35.jpg\n",
            " - test23_1.jpg\n",
            " - test11_3.jpg\n",
            " - test24_3.jpg\n",
            " - test16_14.jpg\n",
            " - test_3.jpg\n",
            " - test9_10.jpg\n",
            " - test9_2.jpg\n",
            " - test20_10.jpg\n",
            " - test1_7.jpg\n",
            " - test7_52.jpg\n",
            " - test15_30.jpg\n",
            " - test19_17.jpg\n",
            " - test25_18.jpg\n",
            " - test19_9.jpg\n",
            " - test7_36.jpg\n",
            " - 5_10.jpg\n",
            " - test9_14.jpg\n",
            " - test1_15.jpg\n",
            " - test24_4.jpg\n",
            " - test17_14.jpg\n",
            " - test27_60.jpg\n",
            " - 5_14.jpg\n",
            " - test11_15.jpg\n",
            " - test18_7.jpg\n",
            " - test28_2.jpg\n",
            " - test24_5.jpg\n",
            " - test29_1.jpg\n",
            " - test1_4.jpg\n",
            " - test17_13.jpg\n",
            " - test15_31.jpg\n",
            " - test3_39.jpg\n",
            " - test16_8.jpg\n",
            " - test17_10.jpg\n",
            " - test28_11.jpg\n",
            " - test_13.jpg\n",
            " - test11_41.jpg\n",
            " - test25_16.jpg\n",
            " - test7_8.jpg\n",
            " - test18_20.jpg\n",
            " - test13_6.jpg\n",
            " - test14_6.jpg\n",
            " - test18_19.jpg\n",
            " - test11_7.jpg\n",
            " - test1_10.jpg\n",
            " - test23_2.jpg\n",
            " - test7_49.jpg\n",
            " - test8_2.jpg\n",
            " - test12_9.jpg\n",
            " - test3_16.jpg\n",
            " - test23_4.jpg\n",
            " - test3_42.jpg\n",
            " - test7_14.jpg\n",
            " - test23_3.jpg\n",
            " - test27_2.jpg\n",
            " - test4_26.jpg\n",
            " - test_24.jpg\n",
            " - test_9.jpg\n",
            " - test27_6.jpg\n",
            " - test16_5.jpg\n",
            " - test24_19.jpg\n",
            " - test3_22.jpg\n",
            " - test8_6.jpg\n",
            " - test1_2.jpg\n",
            " - test22_12.jpg\n",
            " - test7_51.jpg\n",
            " - test3_37.jpg\n",
            " - test11_4.jpg\n",
            " - test17_3.jpg\n",
            " - test16_13.jpg\n",
            " - test17_11.jpg\n",
            " - test14_4.jpg\n",
            " - test14_7.jpg\n",
            " - test20_9.jpg\n",
            " - test29_31.jpg\n",
            " - test29_29.jpg\n",
            " - test25_14.jpg\n",
            " - test22_16.jpg\n",
            " - test16_15.jpg\n",
            " - test19_2.jpg\n",
            " - test4_16.jpg\n",
            " - test4_18.jpg\n",
            " - test_7.jpg\n",
            " - test14_24.jpg\n",
            " - test3_23.jpg\n",
            " - test12_11.jpg\n",
            " - test25_2.jpg\n",
            " - test9_4.jpg\n",
            " - test15_25.jpg\n",
            " - test4_30.jpg\n",
            " - test_12.jpg\n",
            " - test9_23.jpg\n",
            " - test13_9.jpg\n",
            " - test4_29.jpg\n",
            " - test11_38.jpg\n",
            " - test29_2.jpg\n",
            " - test18_16.jpg\n",
            " - test25_6.jpg\n",
            " - test19_1.jpg\n",
            " - test17_26.jpg\n",
            " - test4_51.jpg\n",
            " - test_46.jpg\n",
            " - test8_20.jpg\n",
            " - test20_11.jpg\n",
            " - test26_4.jpg\n",
            " - test9_7.jpg\n",
            " - test15_24.jpg\n",
            " - test25_3.jpg\n",
            " - test_4.jpg\n",
            " - test4_25.jpg\n",
            " - test4_54.jpg\n",
            " - test20_12.jpg\n",
            " - test4_59.jpg\n",
            " - test1_11.jpg\n",
            " - test18_3.jpg\n",
            " - test7_48.jpg\n",
            " - test7_58.jpg\n",
            " - test30_4.jpg\n",
            " - test7_23.jpg\n",
            " - test20_2.jpg\n",
            " - test17_27.jpg\n",
            " - test11_50.jpg\n",
            " - test22_8.jpg\n",
            " - test16_2.jpg\n",
            " - test11_56.jpg\n",
            " - test4_55.jpg\n",
            " - test19_4.jpg\n",
            " - test3_19.jpg\n",
            " - test13_4.jpg\n",
            " - test13_27.jpg\n",
            " - test4_1.jpg\n",
            " - test11_8.jpg\n",
            " - test8_8.jpg\n",
            " - test9_11.jpg\n",
            " - test26_10.jpg\n",
            " - test18_1.jpg\n",
            " - test22_10.jpg\n",
            " - test11_47.jpg\n",
            " - test26_9.jpg\n",
            " - test11_39.jpg\n",
            " - test20_4.jpg\n",
            " - 5_25.jpg\n",
            " - test4_52.jpg\n",
            " - test24_20.jpg\n",
            " - test24_15.jpg\n",
            " - test24_12.jpg\n",
            " - test7_40.jpg\n",
            " - 5_5.jpg\n",
            " - test26_1.jpg\n",
            " - test20_5.jpg\n",
            " - test8_1.jpg\n",
            " - test29_23.jpg\n",
            " - test20_13.jpg\n",
            " - 5_30.jpg\n",
            " - test23_5.jpg\n",
            " - test17_5.jpg\n",
            " - test3_13.jpg\n",
            " - test17_30.jpg\n",
            " - test9_24.jpg\n",
            " - test25_8.jpg\n",
            " - test_21.jpg\n",
            " - test15_19.jpg\n",
            " - test4_20.jpg\n",
            " - test20_8.jpg\n",
            " - test16_9.jpg\n",
            " - test29_4.jpg\n",
            " - test22_5.jpg\n",
            " - test17_4.jpg\n",
            " - test_10.jpg\n",
            " - test7_24.jpg\n",
            " - test25_12.jpg\n",
            " - test26_3.jpg\n",
            " - 5_8.jpg\n",
            " - test17_1.jpg\n",
            " - test30_2.jpg\n",
            " - test1_5.jpg\n",
            " - test11_16.jpg\n",
            " - test13_31.jpg\n",
            " - test4_58.jpg\n",
            " - test7_46.jpg\n",
            " - test16_11.jpg\n",
            " - test7_13.jpg\n",
            " - test13_29.jpg\n",
            " - test7_2.jpg\n",
            " - test22_11.jpg\n",
            " - test26_7.jpg\n",
            " - 5_29.jpg\n",
            " - test7_20.jpg\n",
            " - test_18.jpg\n",
            " - test16_17.jpg\n",
            " - test25_9.jpg\n",
            " - test9_21.jpg\n",
            " - test_25.jpg\n",
            " - test18_2.jpg\n",
            " - test19_20.jpg\n",
            " - test19_8.jpg\n",
            " - test16_3.jpg\n",
            " - test15_23.jpg\n",
            " - test13_5.jpg\n",
            " - test9_22.jpg\n",
            " - 5_7.jpg\n",
            " - test8_5.jpg\n",
            " - test19_18.jpg\n",
            " - test_1.jpg\n",
            " - test19_11.jpg\n",
            " - test7_5.jpg\n",
            " - 5_28.jpg\n",
            " - test_8.jpg\n",
            " - test25_15.jpg\n",
            " - test18_17.jpg\n",
            " - 5_11.jpg\n",
            " - test7_16.jpg\n",
            " - test25_13.jpg\n",
            " - test11_2.jpg\n",
            " - test1_14.jpg\n",
            " - test22_6.jpg\n",
            " - test24_9.jpg\n",
            " - test27_4.jpg\n",
            " - test20_3.jpg\n",
            " - 5_24.jpg\n",
            " - test22_15.jpg\n",
            " - test17_9.jpg\n",
            " - test15_21.jpg\n",
            " - test23_8.jpg\n",
            " - test27_59.jpg\n",
            " - 5_15.jpg\n",
            " - test19_6.jpg\n",
            " - test19_14.jpg\n",
            " - test1_13.jpg\n",
            " - test29_30.jpg\n",
            " - test7_4.jpg\n",
            " - test7_34.jpg\n",
            " - test3_17.jpg\n",
            " - test18_10.jpg\n",
            " - test12_8.jpg\n",
            " - test13_3.jpg\n",
            " - test19_3.jpg\n",
            " - test11_10.jpg\n",
            " - test10_4.jpg\n",
            " - test9_17.jpg\n",
            " - test24_14.jpg\n",
            " - test17_7.jpg\n",
            " - test_19.jpg\n",
            " - test4_27.jpg\n",
            " - test22_18.jpg\n",
            " - test8_19.jpg\n",
            " - test9_16.jpg\n",
            " - test4_24.jpg\n",
            " - test3_36.jpg\n",
            " - test29_20.jpg\n",
            " - test4_3.jpg\n",
            " - test17_23.jpg\n",
            " - test4_17.jpg\n",
            " - test11_42.jpg\n",
            " - test8_7.jpg\n",
            " - test17_24.jpg\n",
            " - test18_18.jpg\n",
            " - test11_13.jpg\n",
            " - test4_23.jpg\n",
            " - test_11.jpg\n",
            " - test24_11.jpg\n",
            " - test17_6.jpg\n",
            " - test24_2.jpg\n",
            " - test11_11.jpg\n",
            " - test16_10.jpg\n",
            " - test7_12.jpg\n",
            " - test9_1.jpg\n",
            " - 5_12.jpg\n",
            " - test11_5.jpg\n",
            " - test18_4.jpg\n",
            " - test18_11.jpg\n",
            " - test14_22.jpg\n",
            " - 5_13.jpg\n",
            " - test_5.jpg\n",
            " - test24_10.jpg\n",
            " - test13_8.jpg\n",
            " - test8_17.jpg\n",
            " - test7_17.jpg\n",
            " - test7_45.jpg\n",
            " - test9_3.jpg\n",
            " - test15_26.jpg\n",
            " - test4_56.jpg\n",
            " - test7_19.jpg\n",
            " - test8_4.jpg\n",
            " - test27_3.jpg\n",
            " - test11_58.jpg\n",
            " - test11_57.jpg\n",
            " - test9_18.jpg\n",
            " - test11_46.jpg\n",
            " - test30_6.jpg\n",
            " - test29_5.jpg\n",
            " - test8_18.jpg\n",
            " - test9_5.jpg\n",
            " - test11_1.jpg\n",
            " - test29_17.jpg\n",
            " - test18_13.jpg\n",
            " - test9_13.jpg\n",
            " - test16_18.jpg\n",
            " - test19_19.jpg\n",
            " - test3_14.jpg\n",
            " - test25_7.jpg\n",
            " - test8_21.jpg\n",
            " - test17_25.jpg\n",
            " - test11_40.jpg\n",
            " - test16_6.jpg\n",
            " - test7_41.jpg\n",
            " - test30_1.jpg\n",
            " - test16_1.jpg\n",
            " - test11_59.jpg\n",
            " - test16_7.jpg\n",
            " - test7_33.jpg\n",
            " - test17_2.jpg\n",
            " - test11_45.jpg\n",
            " - test14_23.jpg\n",
            " - test29_16.jpg\n",
            " - test1_3.jpg\n",
            " - test13_7.jpg\n",
            " - test3_20.jpg\n",
            " - 5_6.jpg\n",
            " - test11_48.jpg\n",
            " - test4_12.jpg\n",
            " - test7_44.jpg\n",
            " - test23_6.jpg\n",
            " - test16_16.jpg\n",
            " - test3_38.jpg\n",
            " - test7_47.jpg\n",
            " - test12_10.jpg\n",
            " - test22_14.jpg\n",
            " - test1_1.jpg\n",
            " - test20_1.jpg\n",
            " - test18_9.jpg\n",
            " - test27_1.jpg\n",
            " - test19_16.jpg\n",
            " - test_16.jpg\n",
            " - test10_6.jpg\n",
            " - test13_26.jpg\n",
            " - test24_7.jpg\n",
            " - test22_13.jpg\n",
            " - test10_2.jpg\n",
            " - test19_5.jpg\n",
            " - test7_18.jpg\n",
            " - test11_60.jpg\n",
            " - test24_16.jpg\n",
            " - 5_9.jpg\n",
            " - test7_6.jpg\n",
            " - test23_7.jpg\n",
            " - test_14.jpg\n",
            " - test3_24.jpg\n",
            " - test8_10.jpg\n",
            " - test10_8.jpg\n",
            " - test7_59.jpg\n",
            " - test20_6.jpg\n",
            " - test1_12.jpg\n",
            " - test15_22.jpg\n",
            " - test7_11.jpg\n",
            " - test15_28.jpg\n",
            " - test11_61.jpg\n",
            " - test4_13.jpg\n",
            " - test11_43.jpg\n",
            " - test13_28.jpg\n",
            " - test7_9.jpg\n",
            " - test1_6.jpg\n",
            " - test15_17.jpg\n",
            " - test14_1.jpg\n",
            " - test18_8.jpg\n",
            " - test_23.jpg\n",
            " - test11_44.jpg\n",
            " - test13_30.jpg\n",
            " - test_15.jpg\n",
            " - test_20.jpg\n",
            " - test3_34.jpg\n",
            " - test4_22.jpg\n",
            " - test14_25.jpg\n",
            " - test28_8.jpg\n",
            " - test9_19.jpg\n",
            " - test7_15.jpg\n",
            " - test24_18.jpg\n",
            " - test26_6.jpg\n",
            " - test24_17.jpg\n",
            " - 5_17.jpg\n",
            " - test19_21.jpg\n",
            " - test3_41.jpg\n",
            " - test19_10.jpg\n",
            " - test29_24.jpg\n",
            " - test4_15.jpg\n",
            " - test12_2.jpg\n",
            " - test19_7.jpg\n",
            " - test28_12.jpg\n",
            " - test7_7.jpg\n",
            " - test28_9.jpg\n",
            " - test3_15.jpg\n",
            " - test29_21.jpg\n",
            " - test17_28.jpg\n",
            " - test3_4.jpg\n",
            " - test30_3.jpg\n",
            " - test7_3.jpg\n",
            " - test4_7.jpg\n",
            " - test19_13.jpg\n",
            " - test24_6.jpg\n",
            " - test7_60.jpg\n",
            " - test4_8.jpg\n",
            " - test14_8.jpg\n",
            " - test15_1.jpg\n",
            " - 5_27.jpg\n",
            " - test25_11.jpg\n",
            " - test10_7.jpg\n",
            " - test22_7.jpg\n",
            " - test18_14.jpg\n",
            " - test20_14.jpg\n",
            " - test7_50.jpg\n",
            " - test3_35.jpg\n",
            " - test13_2.jpg\n",
            " - test7_42.jpg\n",
            " - test9_9.jpg\n",
            " - test17_8.jpg\n",
            " - test_6.jpg\n",
            " - test28_7.jpg\n",
            " - test7_21.jpg\n",
            " - test22_9.jpg\n",
            " - test11_9.jpg\n",
            " - test25_4.jpg\n",
            "Directory: /content/data/train/Accident\n",
            " - test10_44.jpg\n",
            " - test1_22.jpg\n",
            " - test3_27.jpg\n",
            " - test10_17.jpg\n",
            " - test19_31.jpg\n",
            " - test26_29.jpg\n",
            " - test13_10.jpg\n",
            " - test11_18.jpg\n",
            " - test27_28.jpg\n",
            " - test27_16.jpg\n",
            " - test18_26.jpg\n",
            " - test2_5.jpg\n",
            " - test17_18.jpg\n",
            " - test27_33.jpg\n",
            " - test28_16.jpg\n",
            " - test11_17.jpg\n",
            " - test11_36.jpg\n",
            " - test21_13.jpg\n",
            " - test27_10.jpg\n",
            " - test21_16.jpg\n",
            " - test29_14.jpg\n",
            " - test24_24.jpg\n",
            " - test23_11.jpg\n",
            " - test1_30.jpg\n",
            " - test26_21.jpg\n",
            " - test21_26.jpg\n",
            " - test25_25.jpg\n",
            " - test13_13.jpg\n",
            " - test15_7.jpg\n",
            " - test19_24.jpg\n",
            " - test17_15.jpg\n",
            " - acc1 (5).jpg\n",
            " - test14_15.jpg\n",
            " - test4_49.jpg\n",
            " - test1_21.jpg\n",
            " - test5_16.jpg\n",
            " - test10_57.jpg\n",
            " - test1_29.jpg\n",
            " - test30_20.jpg\n",
            " - test28_21.jpg\n",
            " - test29_12.jpg\n",
            " - test10_38.jpg\n",
            " - test_40.jpg\n",
            " - test27_15.jpg\n",
            " - test2_22.jpg\n",
            " - test23_24.jpg\n",
            " - test21_12.jpg\n",
            " - test30_17.jpg\n",
            " - test29_8.jpg\n",
            " - test14_13.jpg\n",
            " - test18_23.jpg\n",
            " - test18_21.jpg\n",
            " - test27_14.jpg\n",
            " - acc1 (1).jpg\n",
            " - test5_19.jpg\n",
            " - test15_2.jpg\n",
            " - test10_19.jpg\n",
            " - test17_19.jpg\n",
            " - test22_28.jpg\n",
            " - test4_35.jpg\n",
            " - test2_20.jpg\n",
            " - test23_14.jpg\n",
            " - test16_19.jpg\n",
            " - test29_13.jpg\n",
            " - test21_19.jpg\n",
            " - test19_30.jpg\n",
            " - test_43.jpg\n",
            " - test23_23.jpg\n",
            " - test4_31.jpg\n",
            " - test10_37.jpg\n",
            " - test1_17.jpg\n",
            " - test15_14.jpg\n",
            " - test20_19.jpg\n",
            " - test15_8.jpg\n",
            " - test10_11.jpg\n",
            " - test24_28.jpg\n",
            " - test5_18.jpg\n",
            " - test4_45.jpg\n",
            " - test22_20.jpg\n",
            " - test3_33.jpg\n",
            " - test11_31.jpg\n",
            " - test23_25.jpg\n",
            " - test28_17.jpg\n",
            " - test10_49.jpg\n",
            " - test8_16.jpg\n",
            " - test4_50.jpg\n",
            " - test10_30.jpg\n",
            " - test27_7.jpg\n",
            " - test10_39.jpg\n",
            " - test23_29.jpg\n",
            " - test1_25.jpg\n",
            " - test24_43.jpg\n",
            " - test11_27.jpg\n",
            " - test5_13.jpg\n",
            " - test11_22.jpg\n",
            " - test10_14.jpg\n",
            " - test4_34.jpg\n",
            " - acc1 (3).jpg\n",
            " - test5_17.jpg\n",
            " - test10_48.jpg\n",
            " - test25_23.jpg\n",
            " - test_28.jpg\n",
            " - test_38.jpg\n",
            " - test14_10.jpg\n",
            " - test2_19.jpg\n",
            " - test24_35.jpg\n",
            " - test24_31.jpg\n",
            " - test24_21.jpg\n",
            " - acc1 (14).jpg\n",
            " - test27_20.jpg\n",
            " - test4_38.jpg\n",
            " - test2_12.jpg\n",
            " - test2_11.jpg\n",
            " - test2_25.jpg\n",
            " - test3_29.jpg\n",
            " - test27_22.jpg\n",
            " - test23_16.jpg\n",
            " - test2_17.jpg\n",
            " - test23_12.jpg\n",
            " - test8_15.jpg\n",
            " - test23_22.jpg\n",
            " - test13_21.jpg\n",
            " - test11_21.jpg\n",
            " - test7_26.jpg\n",
            " - test16_22.jpg\n",
            " - test13_1.jpg\n",
            " - test3_30.jpg\n",
            " - test10_51.jpg\n",
            " - test2_13.jpg\n",
            " - test13_12.jpg\n",
            " - test10_58.jpg\n",
            " - test4_48.jpg\n",
            " - test10_47.jpg\n",
            " - test17_21.jpg\n",
            " - test8_14.jpg\n",
            " - test10_13.jpg\n",
            " - test16_21.jpg\n",
            " - test10_21.jpg\n",
            " - test2_24.jpg\n",
            " - acc1 (13).jpg\n",
            " - test21_23.jpg\n",
            " - test23_13.jpg\n",
            " - test24_27.jpg\n",
            " - test2_6.jpg\n",
            " - test12_17.jpg\n",
            " - test15_5.jpg\n",
            " - test24_29.jpg\n",
            " - test11_35.jpg\n",
            " - test29_10.jpg\n",
            " - test17_22.jpg\n",
            " - test14_17.jpg\n",
            " - test14_21.jpg\n",
            " - test26_13.jpg\n",
            " - test21_17.jpg\n",
            " - test27_11.jpg\n",
            " - test4_46.jpg\n",
            " - test27_32.jpg\n",
            " - test29_11.jpg\n",
            " - acc1 (2).jpg\n",
            " - test16_23.jpg\n",
            " - test10_40.jpg\n",
            " - test24_22.jpg\n",
            " - test_31.jpg\n",
            " - test21_25.jpg\n",
            " - test22_26.jpg\n",
            " - test10_52.jpg\n",
            " - test11_19.jpg\n",
            " - test20_18.jpg\n",
            " - test4_41.jpg\n",
            " - test7_28.jpg\n",
            " - test10_24.jpg\n",
            " - test18_30.jpg\n",
            " - test27_8.jpg\n",
            " - test13_19.jpg\n",
            " - test10_60.jpg\n",
            " - test16_26.jpg\n",
            " - test_29.jpg\n",
            " - test26_19.jpg\n",
            " - test2_15.jpg\n",
            " - test13_25.jpg\n",
            " - test15_6.jpg\n",
            " - test20_16.jpg\n",
            " - test17_16.jpg\n",
            " - test10_35.jpg\n",
            " - test25_26.jpg\n",
            " - test19_22.jpg\n",
            " - test28_22.jpg\n",
            " - test23_20.jpg\n",
            " - test25_27.jpg\n",
            " - test5_20.jpg\n",
            " - test11_24.jpg\n",
            " - test4_32.jpg\n",
            " - test24_37.jpg\n",
            " - test11_29.jpg\n",
            " - test11_32.jpg\n",
            " - test10_10.jpg\n",
            " - test24_40.jpg\n",
            " - test16_30.jpg\n",
            " - test25_29.jpg\n",
            " - test26_20.jpg\n",
            " - test22_24.jpg\n",
            " - test28_30.jpg\n",
            " - test15_3.jpg\n",
            " - test10_31.jpg\n",
            " - test22_21.jpg\n",
            " - test21_21.jpg\n",
            " - test26_31.jpg\n",
            " - test7_27.jpg\n",
            " - test13_16.jpg\n",
            " - test23_26.jpg\n",
            " - test13_15.jpg\n",
            " - test16_24.jpg\n",
            " - test5_15.jpg\n",
            " - test2_21.jpg\n",
            " - test2_2.jpg\n",
            " - test22_22.jpg\n",
            " - test26_18.jpg\n",
            " - test1_23.jpg\n",
            " - test30_12.jpg\n",
            " - test21_15.jpg\n",
            " - test14_20.jpg\n",
            " - test16_25.jpg\n",
            " - test10_45.jpg\n",
            " - test10_42.jpg\n",
            " - test4_36.jpg\n",
            " - test19_28.jpg\n",
            " - test11_28.jpg\n",
            " - test21_27.jpg\n",
            " - test19_29.jpg\n",
            " - test21_24.jpg\n",
            " - test24_42.jpg\n",
            " - test23_17.jpg\n",
            " - acc1 (15).jpg\n",
            " - test27_29.jpg\n",
            " - test_39.jpg\n",
            " - test10_59.jpg\n",
            " - test10_18.jpg\n",
            " - test18_29.jpg\n",
            " - test24_26.jpg\n",
            " - test10_9.jpg\n",
            " - test1_16.jpg\n",
            " - test26_17.jpg\n",
            " - test2_9.jpg\n",
            " - test12_18.jpg\n",
            " - test3_31.jpg\n",
            " - test26_27.jpg\n",
            " - test13_14.jpg\n",
            " - test10_20.jpg\n",
            " - test28_24.jpg\n",
            " - test_34.jpg\n",
            " - test13_23.jpg\n",
            " - test18_28.jpg\n",
            " - test5_11.jpg\n",
            " - test24_38.jpg\n",
            " - test30_10.jpg\n",
            " - test10_16.jpg\n",
            " - test20_17.jpg\n",
            " - test28_25.jpg\n",
            " - test22_30.jpg\n",
            " - test14_12.jpg\n",
            " - test11_37.jpg\n",
            " - test27_30.jpg\n",
            " - test14_9.jpg\n",
            " - test7_29.jpg\n",
            " - test10_12.jpg\n",
            " - test10_50.jpg\n",
            " - test25_30.jpg\n",
            " - test24_39.jpg\n",
            " - test15_11.jpg\n",
            " - test10_15.jpg\n",
            " - test2_8.jpg\n",
            " - test27_27.jpg\n",
            " - test26_24.jpg\n",
            " - test8_13.jpg\n",
            " - test7_31.jpg\n",
            " - test11_33.jpg\n",
            " - test16_29.jpg\n",
            " - test_42.jpg\n",
            " - test15_16.jpg\n",
            " - test27_23.jpg\n",
            " - test12_15.jpg\n",
            " - test27_31.jpg\n",
            " - test12_19.jpg\n",
            " - test24_36.jpg\n",
            " - test15_10.jpg\n",
            " - test29_9.jpg\n",
            " - test4_44.jpg\n",
            " - test30_16.jpg\n",
            " - test28_28.jpg\n",
            " - test1_19.jpg\n",
            " - test11_34.jpg\n",
            " - test11_20.jpg\n",
            " - test22_25.jpg\n",
            " - test23_27.jpg\n",
            " - test10_28.jpg\n",
            " - test13_17.jpg\n",
            " - test3_28.jpg\n",
            " - test1_28.jpg\n",
            " - test28_19.jpg\n",
            " - test4_39.jpg\n",
            " - test19_23.jpg\n",
            " - test22_31.jpg\n",
            " - test27_24.jpg\n",
            " - test30_11.jpg\n",
            " - test30_19.jpg\n",
            " - test23_28.jpg\n",
            " - test26_25.jpg\n",
            " - test10_43.jpg\n",
            " - test10_29.jpg\n",
            " - test27_36.jpg\n",
            " - test_32.jpg\n",
            " - test23_21.jpg\n",
            " - test14_18.jpg\n",
            " - test22_29.jpg\n",
            " - test_27.jpg\n",
            " - test23_9.jpg\n",
            " - test23_30.jpg\n",
            " - test16_27.jpg\n",
            " - test8_12.jpg\n",
            " - test11_30.jpg\n",
            " - test17_17.jpg\n",
            " - test10_32.jpg\n",
            " - test15_13.jpg\n",
            " - test13_24.jpg\n",
            " - test23_31.jpg\n",
            " - test19_27.jpg\n",
            " - test24_25.jpg\n",
            " - test17_20.jpg\n",
            " - test10_25.jpg\n",
            " - test10_26.jpg\n",
            " - test24_34.jpg\n",
            " - test10_55.jpg\n",
            " - test_44.jpg\n",
            " - test12_12.jpg\n",
            " - test15_12.jpg\n",
            " - test15_4.jpg\n",
            " - test26_16.jpg\n",
            " - test14_14.jpg\n",
            " - test10_53.jpg\n",
            " - test24_32.jpg\n",
            " - test23_10.jpg\n",
            " - test4_33.jpg\n",
            " - test27_12.jpg\n",
            " - test19_25.jpg\n",
            " - test28_15.jpg\n",
            " - test24_33.jpg\n",
            " - test24_23.jpg\n",
            " - test25_28.jpg\n",
            " - test14_16.jpg\n",
            " - test18_27.jpg\n",
            " - test12_14.jpg\n",
            " - test11_23.jpg\n",
            " - test5_10.jpg\n",
            " - test11_25.jpg\n",
            " - test21_11.jpg\n",
            " - test11_26.jpg\n",
            " - test27_19.jpg\n",
            " - test2_14.jpg\n",
            " - test2_18.jpg\n",
            " - test10_41.jpg\n",
            " - test13_11.jpg\n",
            " - test16_20.jpg\n",
            " - test20_15.jpg\n",
            " - test26_14.jpg\n",
            " - test_36.jpg\n",
            " - test30_18.jpg\n",
            " - test26_28.jpg\n",
            " - test7_30.jpg\n",
            " - test28_27.jpg\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "\n",
        "base_path = '/content/data'\n",
        "for dirname, _, filenames in os.walk(base_path):\n",
        "    print(f'Directory: {dirname}')\n",
        "    for filename in filenames:\n",
        "        print(f' - {filename}')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yKKRXQ9hSB6s",
        "outputId": "f89f37e0-88a3-4a79-a081-3c8c3ac07653"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "False\n",
            "False\n"
          ]
        }
      ],
      "source": [
        "train_dir = '/kaggle/input/accident-detection-from-cctv-footage/data/train'\n",
        "test_dir = '/kaggle/input/accident-detection-from-cctv-footage/data/test'\n",
        "val_dir = '/kaggle/input/accident-detection-from-cctv-footage/data/val'\n",
        "\n",
        "print(os.path.exists(train_dir))\n",
        "print(os.path.exists(test_dir))\n",
        "print(os.path.exists(val_dir))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 544
        },
        "id": "63-9m1cYSFcS",
        "outputId": "fef50343-0d08-4263-d716-e5fb50006a25"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-ac57b006-93e5-463f-b540-7637b2cb9056\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-ac57b006-93e5-463f-b540-7637b2cb9056\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving accident-detection-from-cctv-footage-metadata (1).json to accident-detection-from-cctv-footage-metadata (1).json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'accident-detection-from-cctv-footage-metadata (1).json': b'{\"@context\":{\"@language\":\"en\",\"@vocab\":\"https://schema.org/\",\"citeAs\":\"cr:citeAs\",\"column\":\"cr:column\",\"conformsTo\":\"dct:conformsTo\",\"cr\":\"http://mlcommons.org/croissant/\",\"data\":{\"@id\":\"cr:data\",\"@type\":\"@json\"},\"dataBiases\":\"cr:dataBiases\",\"dataCollection\":\"cr:dataCollection\",\"dataType\":{\"@id\":\"cr:dataType\",\"@type\":\"@vocab\"},\"dct\":\"http://purl.org/dc/terms/\",\"extract\":\"cr:extract\",\"field\":\"cr:field\",\"fileProperty\":\"cr:fileProperty\",\"fileObject\":\"cr:fileObject\",\"fileSet\":\"cr:fileSet\",\"format\":\"cr:format\",\"includes\":\"cr:includes\",\"isEnumeration\":\"cr:isEnumeration\",\"jsonPath\":\"cr:jsonPath\",\"key\":\"cr:key\",\"md5\":\"cr:md5\",\"parentField\":\"cr:parentField\",\"path\":\"cr:path\",\"personalSensitiveInformation\":\"cr:personalSensitiveInformation\",\"recordSet\":\"cr:recordSet\",\"references\":\"cr:references\",\"regex\":\"cr:regex\",\"repeated\":\"cr:repeated\",\"replace\":\"cr:replace\",\"sc\":\"https://schema.org/\",\"separator\":\"cr:separator\",\"source\":\"cr:source\",\"subField\":\"cr:subField\",\"transform\":\"cr:transform\",\"wd\":\"https://www.wikidata.org/wiki/\"},\"alternateName\":\"Contains CCTV footage frames of accidents and non-accidents.\",\"citeAs\":\"10.34740/kaggle/dsv/1379553\",\"conformsTo\":\"http://mlcommons.org/croissant/1.0\",\"license\":{\"@type\":\"sc:CreativeWork\",\"name\":\"Database: Open Database, Contents: \\\\u00A9 Original Authors\",\"url\":\"http://opendatacommons.org/licenses/odbl/1.0/\"},\"distribution\":[{\"contentUrl\":\"https://www.kaggle.com/api/v1/datasets/download/ckay16/accident-detection-from-cctv-footage?datasetVersionNumber=1\",\"contentSize\":\"249.396 MB\",\"md5\":\"PCzhI08q12DB0W8o6y3rDg==\",\"encodingFormat\":\"application/zip\",\"@id\":\"archive.zip\",\"@type\":\"cr:FileObject\",\"name\":\"archive.zip\",\"description\":\"Archive containing all the contents of the Accident Detection From CCTV Footage dataset\"},{\"includes\":\"*.jpg\",\"containedIn\":{\"@id\":\"archive.zip\"},\"encodingFormat\":\"image/jpeg\",\"@id\":\"image-jpeg_fileset\",\"@type\":\"cr:FileSet\",\"name\":\"image/jpeg files\",\"description\":\"image/jpeg files contained in archive.zip\"}],\"version\":1,\"keywords\":[\"subject \\\\u003E people and society \\\\u003E law \\\\u003E government \\\\u003E public safety\"],\"identifier\":\"10.34740/kaggle/dsv/1379553\",\"isAccessibleForFree\":true,\"includedInDataCatalog\":{\"@type\":\"sc:DataCatalog\",\"name\":\"Kaggle\",\"url\":\"https://www.kaggle.com\"},\"creator\":{\"@type\":\"sc:Person\",\"name\":\"Charan Kumar\",\"url\":\"/ckay16\",\"image\":\"https://storage.googleapis.com/kaggle-avatars/thumbnails/3475408-kg.jpg\"},\"publisher\":{\"@type\":\"sc:Organization\",\"name\":\"Kaggle\",\"url\":\"https://www.kaggle.com/organizations/kaggle\",\"image\":\"https://storage.googleapis.com/kaggle-organizations/4/thumbnail.png\"},\"thumbnailUrl\":\"https://storage.googleapis.com/kaggle-datasets-images/804753/1379553/d15c0497cf2c65879eb59d03c8b519b3/dataset-card.jpg?t=2020-07-29-07-23-23\",\"dateModified\":\"2020-07-29T06:45:13.04\",\"datePublished\":\"2020-07-29T06:45:13.04\",\"@type\":\"sc:Dataset\",\"name\":\"Accident Detection From CCTV Footage\",\"url\":\"https://www.kaggle.com/datasets/ckay16/accident-detection-from-cctv-footage/versions/1\",\"description\":\"### Context\\\\n\\\\nThis dataset was created to detect accidents in real-time from cctv footage\\\\n\\\\n\\\\n### Content\\\\n\\\\nDataset contains images of accidents and non accidents split into train,test and val folders.\\\\n\\\\n\\\\n### Acknowledgements\\\\n\\\\nThanks to Youtube for the videos.\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "from google.colab import files\n",
        "files.upload()  # API anahtarınızı seçin ve yükleyin\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5_Jjbh9aS7Lp",
        "outputId": "9d1532ac-3acd-47dd-9afc-f47bdf410ad4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.10/dist-packages (1.6.14)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.10/dist-packages (from kaggle) (1.16.0)\n",
            "Requirement already satisfied: certifi>=2023.7.22 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2024.2.2)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.31.0)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from kaggle) (4.66.4)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.10/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from kaggle) (2.0.7)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from kaggle) (6.1.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.10/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->kaggle) (3.7)\n"
          ]
        }
      ],
      "source": [
        "!pip install kaggle\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "! mkdir /.kaggle\n",
        "!cp accident-detection-from-cctv-footage-metadata (1).json /.kaagle/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WdDe28bk0Jr-",
        "outputId": "ad416ea5-43b0-4424-f438-e5b85e292996"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mkdir: cannot create directory ‘/.kaggle’: File exists\n",
            "/bin/bash: -c: line 1: syntax error near unexpected token `('\n",
            "/bin/bash: -c: line 1: `cp accident-detection-from-cctv-footage-metadata (1).json /.kaagle/'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gzeOKR7TTAIq",
        "outputId": "6c8da86a-d8f2-4d61-8cd4-8bc178f9d338"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/ckay16/accident-detection-from-cctv-footage\n",
            "License(s): ODbL-1.0\n",
            "Downloading accident-detection-from-cctv-footage.zip to /content\n",
            " 97% 241M/249M [00:03<00:00, 55.6MB/s]\n",
            "100% 249M/249M [00:03<00:00, 65.5MB/s]\n"
          ]
        }
      ],
      "source": [
        "!kaggle datasets download -d ckay16/accident-detection-from-cctv-footage\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "q9cbeR5YU4MZ",
        "outputId": "5fd7d80f-3b20-41a4-8ecf-186ba70fdf73"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  accident-detection-from-cctv-footage.zip\n",
            "  inflating: data/test/Accident/acc1 (7).jpg  \n",
            "  inflating: data/test/Accident/test10_33.jpg  \n",
            "  inflating: data/test/Accident/test10_56.jpg  \n",
            "  inflating: data/test/Accident/test10_61.jpg  \n",
            "  inflating: data/test/Accident/test12_13.jpg  \n",
            "  inflating: data/test/Accident/test12_16.jpg  \n",
            "  inflating: data/test/Accident/test13_22.jpg  \n",
            "  inflating: data/test/Accident/test15_15.jpg  \n",
            "  inflating: data/test/Accident/test18_22.jpg  \n",
            "  inflating: data/test/Accident/test18_24.jpg  \n",
            "  inflating: data/test/Accident/test19_26.jpg  \n",
            "  inflating: data/test/Accident/test1_18.jpg  \n",
            "  inflating: data/test/Accident/test1_20.jpg  \n",
            "  inflating: data/test/Accident/test1_24.jpg  \n",
            "  inflating: data/test/Accident/test1_26.jpg  \n",
            "  inflating: data/test/Accident/test1_27.jpg  \n",
            "  inflating: data/test/Accident/test21_10.jpg  \n",
            "  inflating: data/test/Accident/test21_14.jpg  \n",
            "  inflating: data/test/Accident/test21_18.jpg  \n",
            "  inflating: data/test/Accident/test21_20.jpg  \n",
            "  inflating: data/test/Accident/test22_23.jpg  \n",
            "  inflating: data/test/Accident/test23_19.jpg  \n",
            "  inflating: data/test/Accident/test24_30.jpg  \n",
            "  inflating: data/test/Accident/test25_24.jpg  \n",
            "  inflating: data/test/Accident/test26_23.jpg  \n",
            "  inflating: data/test/Accident/test26_30.jpg  \n",
            "  inflating: data/test/Accident/test27_13.jpg  \n",
            "  inflating: data/test/Accident/test27_25.jpg  \n",
            "  inflating: data/test/Accident/test27_34.jpg  \n",
            "  inflating: data/test/Accident/test28_20.jpg  \n",
            "  inflating: data/test/Accident/test28_23.jpg  \n",
            "  inflating: data/test/Accident/test28_26.jpg  \n",
            "  inflating: data/test/Accident/test2_1.jpg  \n",
            "  inflating: data/test/Accident/test2_10.jpg  \n",
            "  inflating: data/test/Accident/test2_16.jpg  \n",
            "  inflating: data/test/Accident/test2_4.jpg  \n",
            "  inflating: data/test/Accident/test2_7.jpg  \n",
            "  inflating: data/test/Accident/test30_8.jpg  \n",
            "  inflating: data/test/Accident/test3_32.jpg  \n",
            "  inflating: data/test/Accident/test4_37.jpg  \n",
            "  inflating: data/test/Accident/test4_40.jpg  \n",
            "  inflating: data/test/Accident/test4_42.jpg  \n",
            "  inflating: data/test/Accident/test4_43.jpg  \n",
            "  inflating: data/test/Accident/test5_12.jpg  \n",
            "  inflating: data/test/Accident/test5_14.jpg  \n",
            "  inflating: data/test/Accident/test7_25.jpg  \n",
            "  inflating: data/test/Accident/test_33.jpg  \n",
            "  inflating: data/test/Non Accident/5_23.jpg  \n",
            "  inflating: data/test/Non Accident/Pictures - Shortcut.lnk  \n",
            "  inflating: data/test/Non Accident/test10_5.jpg  \n",
            "  inflating: data/test/Non Accident/test11_12.jpg  \n",
            "  inflating: data/test/Non Accident/test11_14.jpg  \n",
            "  inflating: data/test/Non Accident/test11_6.jpg  \n",
            "  inflating: data/test/Non Accident/test12_1.jpg  \n",
            "  inflating: data/test/Non Accident/test14_2.jpg  \n",
            "  inflating: data/test/Non Accident/test15_20.jpg  \n",
            "  inflating: data/test/Non Accident/test15_29.jpg  \n",
            "  inflating: data/test/Non Accident/test16_4.jpg  \n",
            "  inflating: data/test/Non Accident/test17_12.jpg  \n",
            "  inflating: data/test/Non Accident/test18_15.jpg  \n",
            "  inflating: data/test/Non Accident/test18_5.jpg  \n",
            "  inflating: data/test/Non Accident/test19_15.jpg  \n",
            "  inflating: data/test/Non Accident/test1_8.jpg  \n",
            "  inflating: data/test/Non Accident/test1_9.jpg  \n",
            "  inflating: data/test/Non Accident/test22_3.jpg  \n",
            "  inflating: data/test/Non Accident/test22_4.jpg  \n",
            "  inflating: data/test/Non Accident/test25_1.jpg  \n",
            "  inflating: data/test/Non Accident/test25_21.jpg  \n",
            "  inflating: data/test/Non Accident/test26_5.jpg  \n",
            "  inflating: data/test/Non Accident/test27_5.jpg  \n",
            "  inflating: data/test/Non Accident/test28_1.jpg  \n",
            "  inflating: data/test/Non Accident/test28_10.jpg  \n",
            "  inflating: data/test/Non Accident/test28_3.jpg  \n",
            "  inflating: data/test/Non Accident/test28_4.jpg  \n",
            "  inflating: data/test/Non Accident/test28_5.jpg  \n",
            "  inflating: data/test/Non Accident/test28_6.jpg  \n",
            "  inflating: data/test/Non Accident/test29_19.jpg  \n",
            "  inflating: data/test/Non Accident/test29_3.jpg  \n",
            "  inflating: data/test/Non Accident/test29_6.jpg  \n",
            "  inflating: data/test/Non Accident/test29_7.jpg  \n",
            "  inflating: data/test/Non Accident/test3_12.jpg  \n",
            "  inflating: data/test/Non Accident/test3_18.jpg  \n",
            "  inflating: data/test/Non Accident/test3_21.jpg  \n",
            "  inflating: data/test/Non Accident/test3_40.jpg  \n",
            "  inflating: data/test/Non Accident/test4_10.jpg  \n",
            "  inflating: data/test/Non Accident/test4_11.jpg  \n",
            "  inflating: data/test/Non Accident/test4_28.jpg  \n",
            "  inflating: data/test/Non Accident/test4_4.jpg  \n",
            "  inflating: data/test/Non Accident/test4_53.jpg  \n",
            "  inflating: data/test/Non Accident/test4_6.jpg  \n",
            "  inflating: data/test/Non Accident/test4_60.jpg  \n",
            "  inflating: data/test/Non Accident/test4_9.jpg  \n",
            "  inflating: data/test/Non Accident/test7_10.jpg  \n",
            "  inflating: data/test/Non Accident/test7_22.jpg  \n",
            "  inflating: data/test/Non Accident/test7_38.jpg  \n",
            "  inflating: data/test/Non Accident/test7_39.jpg  \n",
            "  inflating: data/test/Non Accident/test8_11.jpg  \n",
            "  inflating: data/test/Non Accident/test8_22.jpg  \n",
            "  inflating: data/test/Non Accident/test8_3.jpg  \n",
            "  inflating: data/test/Non Accident/test9_20.jpg  \n",
            "  inflating: data/test/Non Accident/test_2.jpg  \n",
            "  inflating: data/train/Accident/acc1 (1).jpg  \n",
            "  inflating: data/train/Accident/acc1 (13).jpg  \n",
            "  inflating: data/train/Accident/acc1 (14).jpg  \n",
            "  inflating: data/train/Accident/acc1 (15).jpg  \n",
            "  inflating: data/train/Accident/acc1 (2).jpg  \n",
            "  inflating: data/train/Accident/acc1 (3).jpg  \n",
            "  inflating: data/train/Accident/acc1 (5).jpg  \n",
            "  inflating: data/train/Accident/test10_10.jpg  \n",
            "  inflating: data/train/Accident/test10_11.jpg  \n",
            "  inflating: data/train/Accident/test10_12.jpg  \n",
            "  inflating: data/train/Accident/test10_13.jpg  \n",
            "  inflating: data/train/Accident/test10_14.jpg  \n",
            "  inflating: data/train/Accident/test10_15.jpg  \n",
            "  inflating: data/train/Accident/test10_16.jpg  \n",
            "  inflating: data/train/Accident/test10_17.jpg  \n",
            "  inflating: data/train/Accident/test10_18.jpg  \n",
            "  inflating: data/train/Accident/test10_19.jpg  \n",
            "  inflating: data/train/Accident/test10_20.jpg  \n",
            "  inflating: data/train/Accident/test10_21.jpg  \n",
            "  inflating: data/train/Accident/test10_24.jpg  \n",
            "  inflating: data/train/Accident/test10_25.jpg  \n",
            "  inflating: data/train/Accident/test10_26.jpg  \n",
            "  inflating: data/train/Accident/test10_28.jpg  \n",
            "  inflating: data/train/Accident/test10_29.jpg  \n",
            "  inflating: data/train/Accident/test10_30.jpg  \n",
            "  inflating: data/train/Accident/test10_31.jpg  \n",
            "  inflating: data/train/Accident/test10_32.jpg  \n",
            "  inflating: data/train/Accident/test10_35.jpg  \n",
            "  inflating: data/train/Accident/test10_37.jpg  \n",
            "  inflating: data/train/Accident/test10_38.jpg  \n",
            "  inflating: data/train/Accident/test10_39.jpg  \n",
            "  inflating: data/train/Accident/test10_40.jpg  \n",
            "  inflating: data/train/Accident/test10_41.jpg  \n",
            "  inflating: data/train/Accident/test10_42.jpg  \n",
            "  inflating: data/train/Accident/test10_43.jpg  \n",
            "  inflating: data/train/Accident/test10_44.jpg  \n",
            "  inflating: data/train/Accident/test10_45.jpg  \n",
            "  inflating: data/train/Accident/test10_47.jpg  \n",
            "  inflating: data/train/Accident/test10_48.jpg  \n",
            "  inflating: data/train/Accident/test10_49.jpg  \n",
            "  inflating: data/train/Accident/test10_50.jpg  \n",
            "  inflating: data/train/Accident/test10_51.jpg  \n",
            "  inflating: data/train/Accident/test10_52.jpg  \n",
            "  inflating: data/train/Accident/test10_53.jpg  \n",
            "  inflating: data/train/Accident/test10_55.jpg  \n",
            "  inflating: data/train/Accident/test10_57.jpg  \n",
            "  inflating: data/train/Accident/test10_58.jpg  \n",
            "  inflating: data/train/Accident/test10_59.jpg  \n",
            "  inflating: data/train/Accident/test10_60.jpg  \n",
            "  inflating: data/train/Accident/test10_9.jpg  \n",
            "  inflating: data/train/Accident/test11_17.jpg  \n",
            "  inflating: data/train/Accident/test11_18.jpg  \n",
            "  inflating: data/train/Accident/test11_19.jpg  \n",
            "  inflating: data/train/Accident/test11_20.jpg  \n",
            "  inflating: data/train/Accident/test11_21.jpg  \n",
            "  inflating: data/train/Accident/test11_22.jpg  \n",
            "  inflating: data/train/Accident/test11_23.jpg  \n",
            "  inflating: data/train/Accident/test11_24.jpg  \n",
            "  inflating: data/train/Accident/test11_25.jpg  \n",
            "  inflating: data/train/Accident/test11_26.jpg  \n",
            "  inflating: data/train/Accident/test11_27.jpg  \n",
            "  inflating: data/train/Accident/test11_28.jpg  \n",
            "  inflating: data/train/Accident/test11_29.jpg  \n",
            "  inflating: data/train/Accident/test11_30.jpg  \n",
            "  inflating: data/train/Accident/test11_31.jpg  \n",
            "  inflating: data/train/Accident/test11_32.jpg  \n",
            "  inflating: data/train/Accident/test11_33.jpg  \n",
            "  inflating: data/train/Accident/test11_34.jpg  \n",
            "  inflating: data/train/Accident/test11_35.jpg  \n",
            "  inflating: data/train/Accident/test11_36.jpg  \n",
            "  inflating: data/train/Accident/test11_37.jpg  \n",
            "  inflating: data/train/Accident/test12_12.jpg  \n",
            "  inflating: data/train/Accident/test12_14.jpg  \n",
            "  inflating: data/train/Accident/test12_15.jpg  \n",
            "  inflating: data/train/Accident/test12_17.jpg  \n",
            "  inflating: data/train/Accident/test12_18.jpg  \n",
            "  inflating: data/train/Accident/test12_19.jpg  \n",
            "  inflating: data/train/Accident/test13_1.jpg  \n",
            "  inflating: data/train/Accident/test13_10.jpg  \n",
            "  inflating: data/train/Accident/test13_11.jpg  \n",
            "  inflating: data/train/Accident/test13_12.jpg  \n",
            "  inflating: data/train/Accident/test13_13.jpg  \n",
            "  inflating: data/train/Accident/test13_14.jpg  \n",
            "  inflating: data/train/Accident/test13_15.jpg  \n",
            "  inflating: data/train/Accident/test13_16.jpg  \n",
            "  inflating: data/train/Accident/test13_17.jpg  \n",
            "  inflating: data/train/Accident/test13_19.jpg  \n",
            "  inflating: data/train/Accident/test13_21.jpg  \n",
            "  inflating: data/train/Accident/test13_23.jpg  \n",
            "  inflating: data/train/Accident/test13_24.jpg  \n",
            "  inflating: data/train/Accident/test13_25.jpg  \n",
            "  inflating: data/train/Accident/test14_10.jpg  \n",
            "  inflating: data/train/Accident/test14_12.jpg  \n",
            "  inflating: data/train/Accident/test14_13.jpg  \n",
            "  inflating: data/train/Accident/test14_14.jpg  \n",
            "  inflating: data/train/Accident/test14_15.jpg  \n",
            "  inflating: data/train/Accident/test14_16.jpg  \n",
            "  inflating: data/train/Accident/test14_17.jpg  \n",
            "  inflating: data/train/Accident/test14_18.jpg  \n",
            "  inflating: data/train/Accident/test14_20.jpg  \n",
            "  inflating: data/train/Accident/test14_21.jpg  \n",
            "  inflating: data/train/Accident/test14_9.jpg  \n",
            "  inflating: data/train/Accident/test15_10.jpg  \n",
            "  inflating: data/train/Accident/test15_11.jpg  \n",
            "  inflating: data/train/Accident/test15_12.jpg  \n",
            "  inflating: data/train/Accident/test15_13.jpg  \n",
            "  inflating: data/train/Accident/test15_14.jpg  \n",
            "  inflating: data/train/Accident/test15_16.jpg  \n",
            "  inflating: data/train/Accident/test15_2.jpg  \n",
            "  inflating: data/train/Accident/test15_3.jpg  \n",
            "  inflating: data/train/Accident/test15_4.jpg  \n",
            "  inflating: data/train/Accident/test15_5.jpg  \n",
            "  inflating: data/train/Accident/test15_6.jpg  \n",
            "  inflating: data/train/Accident/test15_7.jpg  \n",
            "  inflating: data/train/Accident/test15_8.jpg  \n",
            "  inflating: data/train/Accident/test16_19.jpg  \n",
            "  inflating: data/train/Accident/test16_20.jpg  \n",
            "  inflating: data/train/Accident/test16_21.jpg  \n",
            "  inflating: data/train/Accident/test16_22.jpg  \n",
            "  inflating: data/train/Accident/test16_23.jpg  \n",
            "  inflating: data/train/Accident/test16_24.jpg  \n",
            "  inflating: data/train/Accident/test16_25.jpg  \n",
            "  inflating: data/train/Accident/test16_26.jpg  \n",
            "  inflating: data/train/Accident/test16_27.jpg  \n",
            "  inflating: data/train/Accident/test16_29.jpg  \n",
            "  inflating: data/train/Accident/test16_30.jpg  \n",
            "  inflating: data/train/Accident/test17_15.jpg  \n",
            "  inflating: data/train/Accident/test17_16.jpg  \n",
            "  inflating: data/train/Accident/test17_17.jpg  \n",
            "  inflating: data/train/Accident/test17_18.jpg  \n",
            "  inflating: data/train/Accident/test17_19.jpg  \n",
            "  inflating: data/train/Accident/test17_20.jpg  \n",
            "  inflating: data/train/Accident/test17_21.jpg  \n",
            "  inflating: data/train/Accident/test17_22.jpg  \n",
            "  inflating: data/train/Accident/test18_21.jpg  \n",
            "  inflating: data/train/Accident/test18_23.jpg  \n",
            "  inflating: data/train/Accident/test18_26.jpg  \n",
            "  inflating: data/train/Accident/test18_27.jpg  \n",
            "  inflating: data/train/Accident/test18_28.jpg  \n",
            "  inflating: data/train/Accident/test18_29.jpg  \n",
            "  inflating: data/train/Accident/test18_30.jpg  \n",
            "  inflating: data/train/Accident/test19_22.jpg  \n",
            "  inflating: data/train/Accident/test19_23.jpg  \n",
            "  inflating: data/train/Accident/test19_24.jpg  \n",
            "  inflating: data/train/Accident/test19_25.jpg  \n",
            "  inflating: data/train/Accident/test19_27.jpg  \n",
            "  inflating: data/train/Accident/test19_28.jpg  \n",
            "  inflating: data/train/Accident/test19_29.jpg  \n",
            "  inflating: data/train/Accident/test19_30.jpg  \n",
            "  inflating: data/train/Accident/test19_31.jpg  \n",
            "  inflating: data/train/Accident/test1_16.jpg  \n",
            "  inflating: data/train/Accident/test1_17.jpg  \n",
            "  inflating: data/train/Accident/test1_19.jpg  \n",
            "  inflating: data/train/Accident/test1_21.jpg  \n",
            "  inflating: data/train/Accident/test1_22.jpg  \n",
            "  inflating: data/train/Accident/test1_23.jpg  \n",
            "  inflating: data/train/Accident/test1_25.jpg  \n",
            "  inflating: data/train/Accident/test1_28.jpg  \n",
            "  inflating: data/train/Accident/test1_29.jpg  \n",
            "  inflating: data/train/Accident/test1_30.jpg  \n",
            "  inflating: data/train/Accident/test20_15.jpg  \n",
            "  inflating: data/train/Accident/test20_16.jpg  \n",
            "  inflating: data/train/Accident/test20_17.jpg  \n",
            "  inflating: data/train/Accident/test20_18.jpg  \n",
            "  inflating: data/train/Accident/test20_19.jpg  \n",
            "  inflating: data/train/Accident/test21_11.jpg  \n",
            "  inflating: data/train/Accident/test21_12.jpg  \n",
            "  inflating: data/train/Accident/test21_13.jpg  \n",
            "  inflating: data/train/Accident/test21_15.jpg  \n",
            "  inflating: data/train/Accident/test21_16.jpg  \n",
            "  inflating: data/train/Accident/test21_17.jpg  \n",
            "  inflating: data/train/Accident/test21_19.jpg  \n",
            "  inflating: data/train/Accident/test21_21.jpg  \n",
            "  inflating: data/train/Accident/test21_23.jpg  \n",
            "  inflating: data/train/Accident/test21_24.jpg  \n",
            "  inflating: data/train/Accident/test21_25.jpg  \n",
            "  inflating: data/train/Accident/test21_26.jpg  \n",
            "  inflating: data/train/Accident/test21_27.jpg  \n",
            "  inflating: data/train/Accident/test22_20.jpg  \n",
            "  inflating: data/train/Accident/test22_21.jpg  \n",
            "  inflating: data/train/Accident/test22_22.jpg  \n",
            "  inflating: data/train/Accident/test22_24.jpg  \n",
            "  inflating: data/train/Accident/test22_25.jpg  \n",
            "  inflating: data/train/Accident/test22_26.jpg  \n",
            "  inflating: data/train/Accident/test22_28.jpg  \n",
            "  inflating: data/train/Accident/test22_29.jpg  \n",
            "  inflating: data/train/Accident/test22_30.jpg  \n",
            "  inflating: data/train/Accident/test22_31.jpg  \n",
            "  inflating: data/train/Accident/test23_10.jpg  \n",
            "  inflating: data/train/Accident/test23_11.jpg  \n",
            "  inflating: data/train/Accident/test23_12.jpg  \n",
            "  inflating: data/train/Accident/test23_13.jpg  \n",
            "  inflating: data/train/Accident/test23_14.jpg  \n",
            "  inflating: data/train/Accident/test23_16.jpg  \n",
            "  inflating: data/train/Accident/test23_17.jpg  \n",
            "  inflating: data/train/Accident/test23_20.jpg  \n",
            "  inflating: data/train/Accident/test23_21.jpg  \n",
            "  inflating: data/train/Accident/test23_22.jpg  \n",
            "  inflating: data/train/Accident/test23_23.jpg  \n",
            "  inflating: data/train/Accident/test23_24.jpg  \n",
            "  inflating: data/train/Accident/test23_25.jpg  \n",
            "  inflating: data/train/Accident/test23_26.jpg  \n",
            "  inflating: data/train/Accident/test23_27.jpg  \n",
            "  inflating: data/train/Accident/test23_28.jpg  \n",
            "  inflating: data/train/Accident/test23_29.jpg  \n",
            "  inflating: data/train/Accident/test23_30.jpg  \n",
            "  inflating: data/train/Accident/test23_31.jpg  \n",
            "  inflating: data/train/Accident/test23_9.jpg  \n",
            "  inflating: data/train/Accident/test24_21.jpg  \n",
            "  inflating: data/train/Accident/test24_22.jpg  \n",
            "  inflating: data/train/Accident/test24_23.jpg  \n",
            "  inflating: data/train/Accident/test24_24.jpg  \n",
            "  inflating: data/train/Accident/test24_25.jpg  \n",
            "  inflating: data/train/Accident/test24_26.jpg  \n",
            "  inflating: data/train/Accident/test24_27.jpg  \n",
            "  inflating: data/train/Accident/test24_28.jpg  \n",
            "  inflating: data/train/Accident/test24_29.jpg  \n",
            "  inflating: data/train/Accident/test24_31.jpg  \n",
            "  inflating: data/train/Accident/test24_32.jpg  \n",
            "  inflating: data/train/Accident/test24_33.jpg  \n",
            "  inflating: data/train/Accident/test24_34.jpg  \n",
            "  inflating: data/train/Accident/test24_35.jpg  \n",
            "  inflating: data/train/Accident/test24_36.jpg  \n",
            "  inflating: data/train/Accident/test24_37.jpg  \n",
            "  inflating: data/train/Accident/test24_38.jpg  \n",
            "  inflating: data/train/Accident/test24_39.jpg  \n",
            "  inflating: data/train/Accident/test24_40.jpg  \n",
            "  inflating: data/train/Accident/test24_42.jpg  \n",
            "  inflating: data/train/Accident/test24_43.jpg  \n",
            "  inflating: data/train/Accident/test25_23.jpg  \n",
            "  inflating: data/train/Accident/test25_25.jpg  \n",
            "  inflating: data/train/Accident/test25_26.jpg  \n",
            "  inflating: data/train/Accident/test25_27.jpg  \n",
            "  inflating: data/train/Accident/test25_28.jpg  \n",
            "  inflating: data/train/Accident/test25_29.jpg  \n",
            "  inflating: data/train/Accident/test25_30.jpg  \n",
            "  inflating: data/train/Accident/test26_13.jpg  \n",
            "  inflating: data/train/Accident/test26_14.jpg  \n",
            "  inflating: data/train/Accident/test26_16.jpg  \n",
            "  inflating: data/train/Accident/test26_17.jpg  \n",
            "  inflating: data/train/Accident/test26_18.jpg  \n",
            "  inflating: data/train/Accident/test26_19.jpg  \n",
            "  inflating: data/train/Accident/test26_20.jpg  \n",
            "  inflating: data/train/Accident/test26_21.jpg  \n",
            "  inflating: data/train/Accident/test26_24.jpg  \n",
            "  inflating: data/train/Accident/test26_25.jpg  \n",
            "  inflating: data/train/Accident/test26_27.jpg  \n",
            "  inflating: data/train/Accident/test26_28.jpg  \n",
            "  inflating: data/train/Accident/test26_29.jpg  \n",
            "  inflating: data/train/Accident/test26_31.jpg  \n",
            "  inflating: data/train/Accident/test27_10.jpg  \n",
            "  inflating: data/train/Accident/test27_11.jpg  \n",
            "  inflating: data/train/Accident/test27_12.jpg  \n",
            "  inflating: data/train/Accident/test27_14.jpg  \n",
            "  inflating: data/train/Accident/test27_15.jpg  \n",
            "  inflating: data/train/Accident/test27_16.jpg  \n",
            "  inflating: data/train/Accident/test27_19.jpg  \n",
            "  inflating: data/train/Accident/test27_20.jpg  \n",
            "  inflating: data/train/Accident/test27_22.jpg  \n",
            "  inflating: data/train/Accident/test27_23.jpg  \n",
            "  inflating: data/train/Accident/test27_24.jpg  \n",
            "  inflating: data/train/Accident/test27_27.jpg  \n",
            "  inflating: data/train/Accident/test27_28.jpg  \n",
            "  inflating: data/train/Accident/test27_29.jpg  \n",
            "  inflating: data/train/Accident/test27_30.jpg  \n",
            "  inflating: data/train/Accident/test27_31.jpg  \n",
            "  inflating: data/train/Accident/test27_32.jpg  \n",
            "  inflating: data/train/Accident/test27_33.jpg  \n",
            "  inflating: data/train/Accident/test27_36.jpg  \n",
            "  inflating: data/train/Accident/test27_7.jpg  \n",
            "  inflating: data/train/Accident/test27_8.jpg  \n",
            "  inflating: data/train/Accident/test28_15.jpg  \n",
            "  inflating: data/train/Accident/test28_16.jpg  \n",
            "  inflating: data/train/Accident/test28_17.jpg  \n",
            "  inflating: data/train/Accident/test28_19.jpg  \n",
            "  inflating: data/train/Accident/test28_21.jpg  \n",
            "  inflating: data/train/Accident/test28_22.jpg  \n",
            "  inflating: data/train/Accident/test28_24.jpg  \n",
            "  inflating: data/train/Accident/test28_25.jpg  \n",
            "  inflating: data/train/Accident/test28_27.jpg  \n",
            "  inflating: data/train/Accident/test28_28.jpg  \n",
            "  inflating: data/train/Accident/test28_30.jpg  \n",
            "  inflating: data/train/Accident/test29_10.jpg  \n",
            "  inflating: data/train/Accident/test29_11.jpg  \n",
            "  inflating: data/train/Accident/test29_12.jpg  \n",
            "  inflating: data/train/Accident/test29_13.jpg  \n",
            "  inflating: data/train/Accident/test29_14.jpg  \n",
            "  inflating: data/train/Accident/test29_8.jpg  \n",
            "  inflating: data/train/Accident/test29_9.jpg  \n",
            "  inflating: data/train/Accident/test2_11.jpg  \n",
            "  inflating: data/train/Accident/test2_12.jpg  \n",
            "  inflating: data/train/Accident/test2_13.jpg  \n",
            "  inflating: data/train/Accident/test2_14.jpg  \n",
            "  inflating: data/train/Accident/test2_15.jpg  \n",
            "  inflating: data/train/Accident/test2_17.jpg  \n",
            "  inflating: data/train/Accident/test2_18.jpg  \n",
            "  inflating: data/train/Accident/test2_19.jpg  \n",
            "  inflating: data/train/Accident/test2_2.jpg  \n",
            "  inflating: data/train/Accident/test2_20.jpg  \n",
            "  inflating: data/train/Accident/test2_21.jpg  \n",
            "  inflating: data/train/Accident/test2_22.jpg  \n",
            "  inflating: data/train/Accident/test2_24.jpg  \n",
            "  inflating: data/train/Accident/test2_25.jpg  \n",
            "  inflating: data/train/Accident/test2_5.jpg  \n",
            "  inflating: data/train/Accident/test2_6.jpg  \n",
            "  inflating: data/train/Accident/test2_8.jpg  \n",
            "  inflating: data/train/Accident/test2_9.jpg  \n",
            "  inflating: data/train/Accident/test30_10.jpg  \n",
            "  inflating: data/train/Accident/test30_11.jpg  \n",
            "  inflating: data/train/Accident/test30_12.jpg  \n",
            "  inflating: data/train/Accident/test30_16.jpg  \n",
            "  inflating: data/train/Accident/test30_17.jpg  \n",
            "  inflating: data/train/Accident/test30_18.jpg  \n",
            "  inflating: data/train/Accident/test30_19.jpg  \n",
            "  inflating: data/train/Accident/test30_20.jpg  \n",
            "  inflating: data/train/Accident/test3_27.jpg  \n",
            "  inflating: data/train/Accident/test3_28.jpg  \n",
            "  inflating: data/train/Accident/test3_29.jpg  \n",
            "  inflating: data/train/Accident/test3_30.jpg  \n",
            "  inflating: data/train/Accident/test3_31.jpg  \n",
            "  inflating: data/train/Accident/test3_33.jpg  \n",
            "  inflating: data/train/Accident/test4_31.jpg  \n",
            "  inflating: data/train/Accident/test4_32.jpg  \n",
            "  inflating: data/train/Accident/test4_33.jpg  \n",
            "  inflating: data/train/Accident/test4_34.jpg  \n",
            "  inflating: data/train/Accident/test4_35.jpg  \n",
            "  inflating: data/train/Accident/test4_36.jpg  \n",
            "  inflating: data/train/Accident/test4_38.jpg  \n",
            "  inflating: data/train/Accident/test4_39.jpg  \n",
            "  inflating: data/train/Accident/test4_41.jpg  \n",
            "  inflating: data/train/Accident/test4_44.jpg  \n",
            "  inflating: data/train/Accident/test4_45.jpg  \n",
            "  inflating: data/train/Accident/test4_46.jpg  \n",
            "  inflating: data/train/Accident/test4_48.jpg  \n",
            "  inflating: data/train/Accident/test4_49.jpg  \n",
            "  inflating: data/train/Accident/test4_50.jpg  \n",
            "  inflating: data/train/Accident/test5_10.jpg  \n",
            "  inflating: data/train/Accident/test5_11.jpg  \n",
            "  inflating: data/train/Accident/test5_13.jpg  \n",
            "  inflating: data/train/Accident/test5_15.jpg  \n",
            "  inflating: data/train/Accident/test5_16.jpg  \n",
            "  inflating: data/train/Accident/test5_17.jpg  \n",
            "  inflating: data/train/Accident/test5_18.jpg  \n",
            "  inflating: data/train/Accident/test5_19.jpg  \n",
            "  inflating: data/train/Accident/test5_20.jpg  \n",
            "  inflating: data/train/Accident/test7_26.jpg  \n",
            "  inflating: data/train/Accident/test7_27.jpg  \n",
            "  inflating: data/train/Accident/test7_28.jpg  \n",
            "  inflating: data/train/Accident/test7_29.jpg  \n",
            "  inflating: data/train/Accident/test7_30.jpg  \n",
            "  inflating: data/train/Accident/test7_31.jpg  \n",
            "  inflating: data/train/Accident/test8_12.jpg  \n",
            "  inflating: data/train/Accident/test8_13.jpg  \n",
            "  inflating: data/train/Accident/test8_14.jpg  \n",
            "  inflating: data/train/Accident/test8_15.jpg  \n",
            "  inflating: data/train/Accident/test8_16.jpg  \n",
            "  inflating: data/train/Accident/test_27.jpg  \n",
            "  inflating: data/train/Accident/test_28.jpg  \n",
            "  inflating: data/train/Accident/test_29.jpg  \n",
            "  inflating: data/train/Accident/test_31.jpg  \n",
            "  inflating: data/train/Accident/test_32.jpg  \n",
            "  inflating: data/train/Accident/test_34.jpg  \n",
            "  inflating: data/train/Accident/test_36.jpg  \n",
            "  inflating: data/train/Accident/test_38.jpg  \n",
            "  inflating: data/train/Accident/test_39.jpg  \n",
            "  inflating: data/train/Accident/test_40.jpg  \n",
            "  inflating: data/train/Accident/test_42.jpg  \n",
            "  inflating: data/train/Accident/test_43.jpg  \n",
            "  inflating: data/train/Accident/test_44.jpg  \n",
            "  inflating: data/train/Non Accident/5_10.jpg  \n",
            "  inflating: data/train/Non Accident/5_11.jpg  \n",
            "  inflating: data/train/Non Accident/5_12.jpg  \n",
            "  inflating: data/train/Non Accident/5_13.jpg  \n",
            "  inflating: data/train/Non Accident/5_14.jpg  \n",
            "  inflating: data/train/Non Accident/5_15.jpg  \n",
            "  inflating: data/train/Non Accident/5_17.jpg  \n",
            "  inflating: data/train/Non Accident/5_24.jpg  \n",
            "  inflating: data/train/Non Accident/5_25.jpg  \n",
            "  inflating: data/train/Non Accident/5_27.jpg  \n",
            "  inflating: data/train/Non Accident/5_28.jpg  \n",
            "  inflating: data/train/Non Accident/5_29.jpg  \n",
            "  inflating: data/train/Non Accident/5_30.jpg  \n",
            "  inflating: data/train/Non Accident/5_5.jpg  \n",
            "  inflating: data/train/Non Accident/5_6.jpg  \n",
            "  inflating: data/train/Non Accident/5_7.jpg  \n",
            "  inflating: data/train/Non Accident/5_8.jpg  \n",
            "  inflating: data/train/Non Accident/5_9.jpg  \n",
            "  inflating: data/train/Non Accident/test10_2.jpg  \n",
            "  inflating: data/train/Non Accident/test10_4.jpg  \n",
            "  inflating: data/train/Non Accident/test10_6.jpg  \n",
            "  inflating: data/train/Non Accident/test10_7.jpg  \n",
            "  inflating: data/train/Non Accident/test10_8.jpg  \n",
            "  inflating: data/train/Non Accident/test11_1.jpg  \n",
            "  inflating: data/train/Non Accident/test11_10.jpg  \n",
            "  inflating: data/train/Non Accident/test11_11.jpg  \n",
            "  inflating: data/train/Non Accident/test11_13.jpg  \n",
            "  inflating: data/train/Non Accident/test11_15.jpg  \n",
            "  inflating: data/train/Non Accident/test11_16.jpg  \n",
            "  inflating: data/train/Non Accident/test11_2.jpg  \n",
            "  inflating: data/train/Non Accident/test11_3.jpg  \n",
            "  inflating: data/train/Non Accident/test11_38.jpg  \n",
            "  inflating: data/train/Non Accident/test11_39.jpg  \n",
            "  inflating: data/train/Non Accident/test11_4.jpg  \n",
            "  inflating: data/train/Non Accident/test11_40.jpg  \n",
            "  inflating: data/train/Non Accident/test11_41.jpg  \n",
            "  inflating: data/train/Non Accident/test11_42.jpg  \n",
            "  inflating: data/train/Non Accident/test11_43.jpg  \n",
            "  inflating: data/train/Non Accident/test11_44.jpg  \n",
            "  inflating: data/train/Non Accident/test11_45.jpg  \n",
            "  inflating: data/train/Non Accident/test11_46.jpg  \n",
            "  inflating: data/train/Non Accident/test11_47.jpg  \n",
            "  inflating: data/train/Non Accident/test11_48.jpg  \n",
            "  inflating: data/train/Non Accident/test11_5.jpg  \n",
            "  inflating: data/train/Non Accident/test11_50.jpg  \n",
            "  inflating: data/train/Non Accident/test11_56.jpg  \n",
            "  inflating: data/train/Non Accident/test11_57.jpg  \n",
            "  inflating: data/train/Non Accident/test11_58.jpg  \n",
            "  inflating: data/train/Non Accident/test11_59.jpg  \n",
            "  inflating: data/train/Non Accident/test11_60.jpg  \n",
            "  inflating: data/train/Non Accident/test11_61.jpg  \n",
            "  inflating: data/train/Non Accident/test11_7.jpg  \n",
            "  inflating: data/train/Non Accident/test11_8.jpg  \n",
            "  inflating: data/train/Non Accident/test11_9.jpg  \n",
            "  inflating: data/train/Non Accident/test12_10.jpg  \n",
            "  inflating: data/train/Non Accident/test12_11.jpg  \n",
            "  inflating: data/train/Non Accident/test12_2.jpg  \n",
            "  inflating: data/train/Non Accident/test12_8.jpg  \n",
            "  inflating: data/train/Non Accident/test12_9.jpg  \n",
            "  inflating: data/train/Non Accident/test13_2.jpg  \n",
            "  inflating: data/train/Non Accident/test13_26.jpg  \n",
            "  inflating: data/train/Non Accident/test13_27.jpg  \n",
            "  inflating: data/train/Non Accident/test13_28.jpg  \n",
            "  inflating: data/train/Non Accident/test13_29.jpg  \n",
            "  inflating: data/train/Non Accident/test13_3.jpg  \n",
            "  inflating: data/train/Non Accident/test13_30.jpg  \n",
            "  inflating: data/train/Non Accident/test13_31.jpg  \n",
            "  inflating: data/train/Non Accident/test13_4.jpg  \n",
            "  inflating: data/train/Non Accident/test13_5.jpg  \n",
            "  inflating: data/train/Non Accident/test13_6.jpg  \n",
            "  inflating: data/train/Non Accident/test13_7.jpg  \n",
            "  inflating: data/train/Non Accident/test13_8.jpg  \n",
            "  inflating: data/train/Non Accident/test13_9.jpg  \n",
            "  inflating: data/train/Non Accident/test14_1.jpg  \n",
            "  inflating: data/train/Non Accident/test14_22.jpg  \n",
            "  inflating: data/train/Non Accident/test14_23.jpg  \n",
            "  inflating: data/train/Non Accident/test14_24.jpg  \n",
            "  inflating: data/train/Non Accident/test14_25.jpg  \n",
            "  inflating: data/train/Non Accident/test14_4.jpg  \n",
            "  inflating: data/train/Non Accident/test14_6.jpg  \n",
            "  inflating: data/train/Non Accident/test14_7.jpg  \n",
            "  inflating: data/train/Non Accident/test14_8.jpg  \n",
            "  inflating: data/train/Non Accident/test15_1.jpg  \n",
            "  inflating: data/train/Non Accident/test15_17.jpg  \n",
            "  inflating: data/train/Non Accident/test15_19.jpg  \n",
            "  inflating: data/train/Non Accident/test15_21.jpg  \n",
            "  inflating: data/train/Non Accident/test15_22.jpg  \n",
            "  inflating: data/train/Non Accident/test15_23.jpg  \n",
            "  inflating: data/train/Non Accident/test15_24.jpg  \n",
            "  inflating: data/train/Non Accident/test15_25.jpg  \n",
            "  inflating: data/train/Non Accident/test15_26.jpg  \n",
            "  inflating: data/train/Non Accident/test15_28.jpg  \n",
            "  inflating: data/train/Non Accident/test15_30.jpg  \n",
            "  inflating: data/train/Non Accident/test15_31.jpg  \n",
            "  inflating: data/train/Non Accident/test16_1.jpg  \n",
            "  inflating: data/train/Non Accident/test16_10.jpg  \n",
            "  inflating: data/train/Non Accident/test16_11.jpg  \n",
            "  inflating: data/train/Non Accident/test16_13.jpg  \n",
            "  inflating: data/train/Non Accident/test16_14.jpg  \n",
            "  inflating: data/train/Non Accident/test16_15.jpg  \n",
            "  inflating: data/train/Non Accident/test16_16.jpg  \n",
            "  inflating: data/train/Non Accident/test16_17.jpg  \n",
            "  inflating: data/train/Non Accident/test16_18.jpg  \n",
            "  inflating: data/train/Non Accident/test16_2.jpg  \n",
            "  inflating: data/train/Non Accident/test16_3.jpg  \n",
            "  inflating: data/train/Non Accident/test16_5.jpg  \n",
            "  inflating: data/train/Non Accident/test16_6.jpg  \n",
            "  inflating: data/train/Non Accident/test16_7.jpg  \n",
            "  inflating: data/train/Non Accident/test16_8.jpg  \n",
            "  inflating: data/train/Non Accident/test16_9.jpg  \n",
            "  inflating: data/train/Non Accident/test17_1.jpg  \n",
            "  inflating: data/train/Non Accident/test17_10.jpg  \n",
            "  inflating: data/train/Non Accident/test17_11.jpg  \n",
            "  inflating: data/train/Non Accident/test17_13.jpg  \n",
            "  inflating: data/train/Non Accident/test17_14.jpg  \n",
            "  inflating: data/train/Non Accident/test17_2.jpg  \n",
            "  inflating: data/train/Non Accident/test17_23.jpg  \n",
            "  inflating: data/train/Non Accident/test17_24.jpg  \n",
            "  inflating: data/train/Non Accident/test17_25.jpg  \n",
            "  inflating: data/train/Non Accident/test17_26.jpg  \n",
            "  inflating: data/train/Non Accident/test17_27.jpg  \n",
            "  inflating: data/train/Non Accident/test17_28.jpg  \n",
            "  inflating: data/train/Non Accident/test17_3.jpg  \n",
            "  inflating: data/train/Non Accident/test17_30.jpg  \n",
            "  inflating: data/train/Non Accident/test17_4.jpg  \n",
            "  inflating: data/train/Non Accident/test17_5.jpg  \n",
            "  inflating: data/train/Non Accident/test17_6.jpg  \n",
            "  inflating: data/train/Non Accident/test17_7.jpg  \n",
            "  inflating: data/train/Non Accident/test17_8.jpg  \n",
            "  inflating: data/train/Non Accident/test17_9.jpg  \n",
            "  inflating: data/train/Non Accident/test18_1.jpg  \n",
            "  inflating: data/train/Non Accident/test18_10.jpg  \n",
            "  inflating: data/train/Non Accident/test18_11.jpg  \n",
            "  inflating: data/train/Non Accident/test18_13.jpg  \n",
            "  inflating: data/train/Non Accident/test18_14.jpg  \n",
            "  inflating: data/train/Non Accident/test18_16.jpg  \n",
            "  inflating: data/train/Non Accident/test18_17.jpg  \n",
            "  inflating: data/train/Non Accident/test18_18.jpg  \n",
            "  inflating: data/train/Non Accident/test18_19.jpg  \n",
            "  inflating: data/train/Non Accident/test18_2.jpg  \n",
            "  inflating: data/train/Non Accident/test18_20.jpg  \n",
            "  inflating: data/train/Non Accident/test18_3.jpg  \n",
            "  inflating: data/train/Non Accident/test18_4.jpg  \n",
            "  inflating: data/train/Non Accident/test18_7.jpg  \n",
            "  inflating: data/train/Non Accident/test18_8.jpg  \n",
            "  inflating: data/train/Non Accident/test18_9.jpg  \n",
            "  inflating: data/train/Non Accident/test19_1.jpg  \n",
            "  inflating: data/train/Non Accident/test19_10.jpg  \n",
            "  inflating: data/train/Non Accident/test19_11.jpg  \n",
            "  inflating: data/train/Non Accident/test19_12.jpg  \n",
            "  inflating: data/train/Non Accident/test19_13.jpg  \n",
            "  inflating: data/train/Non Accident/test19_14.jpg  \n",
            "  inflating: data/train/Non Accident/test19_16.jpg  \n",
            "  inflating: data/train/Non Accident/test19_17.jpg  \n",
            "  inflating: data/train/Non Accident/test19_18.jpg  \n",
            "  inflating: data/train/Non Accident/test19_19.jpg  \n",
            "  inflating: data/train/Non Accident/test19_2.jpg  \n",
            "  inflating: data/train/Non Accident/test19_20.jpg  \n",
            "  inflating: data/train/Non Accident/test19_21.jpg  \n",
            "  inflating: data/train/Non Accident/test19_3.jpg  \n",
            "  inflating: data/train/Non Accident/test19_4.jpg  \n",
            "  inflating: data/train/Non Accident/test19_5.jpg  \n",
            "  inflating: data/train/Non Accident/test19_6.jpg  \n",
            "  inflating: data/train/Non Accident/test19_7.jpg  \n",
            "  inflating: data/train/Non Accident/test19_8.jpg  \n",
            "  inflating: data/train/Non Accident/test19_9.jpg  \n",
            "  inflating: data/train/Non Accident/test1_1.jpg  \n",
            "  inflating: data/train/Non Accident/test1_10.jpg  \n",
            "  inflating: data/train/Non Accident/test1_11.jpg  \n",
            "  inflating: data/train/Non Accident/test1_12.jpg  \n",
            "  inflating: data/train/Non Accident/test1_13.jpg  \n",
            "  inflating: data/train/Non Accident/test1_14.jpg  \n",
            "  inflating: data/train/Non Accident/test1_15.jpg  \n",
            "  inflating: data/train/Non Accident/test1_2.jpg  \n",
            "  inflating: data/train/Non Accident/test1_3.jpg  \n",
            "  inflating: data/train/Non Accident/test1_4.jpg  \n",
            "  inflating: data/train/Non Accident/test1_5.jpg  \n",
            "  inflating: data/train/Non Accident/test1_6.jpg  \n",
            "  inflating: data/train/Non Accident/test1_7.jpg  \n",
            "  inflating: data/train/Non Accident/test20_1.jpg  \n",
            "  inflating: data/train/Non Accident/test20_10.jpg  \n",
            "  inflating: data/train/Non Accident/test20_11.jpg  \n",
            "  inflating: data/train/Non Accident/test20_12.jpg  \n",
            "  inflating: data/train/Non Accident/test20_13.jpg  \n",
            "  inflating: data/train/Non Accident/test20_14.jpg  \n",
            "  inflating: data/train/Non Accident/test20_2.jpg  \n",
            "  inflating: data/train/Non Accident/test20_3.jpg  \n",
            "  inflating: data/train/Non Accident/test20_4.jpg  \n",
            "  inflating: data/train/Non Accident/test20_5.jpg  \n",
            "  inflating: data/train/Non Accident/test20_6.jpg  \n",
            "  inflating: data/train/Non Accident/test20_8.jpg  \n",
            "  inflating: data/train/Non Accident/test20_9.jpg  \n",
            "  inflating: data/train/Non Accident/test22_10.jpg  \n",
            "  inflating: data/train/Non Accident/test22_11.jpg  \n",
            "  inflating: data/train/Non Accident/test22_12.jpg  \n",
            "  inflating: data/train/Non Accident/test22_13.jpg  \n",
            "  inflating: data/train/Non Accident/test22_14.jpg  \n",
            "  inflating: data/train/Non Accident/test22_15.jpg  \n",
            "  inflating: data/train/Non Accident/test22_16.jpg  \n",
            "  inflating: data/train/Non Accident/test22_18.jpg  \n",
            "  inflating: data/train/Non Accident/test22_5.jpg  \n",
            "  inflating: data/train/Non Accident/test22_6.jpg  \n",
            "  inflating: data/train/Non Accident/test22_7.jpg  \n",
            "  inflating: data/train/Non Accident/test22_8.jpg  \n",
            "  inflating: data/train/Non Accident/test22_9.jpg  \n",
            "  inflating: data/train/Non Accident/test23_1.jpg  \n",
            "  inflating: data/train/Non Accident/test23_2.jpg  \n",
            "  inflating: data/train/Non Accident/test23_3.jpg  \n",
            "  inflating: data/train/Non Accident/test23_4.jpg  \n",
            "  inflating: data/train/Non Accident/test23_5.jpg  \n",
            "  inflating: data/train/Non Accident/test23_6.jpg  \n",
            "  inflating: data/train/Non Accident/test23_7.jpg  \n",
            "  inflating: data/train/Non Accident/test23_8.jpg  \n",
            "  inflating: data/train/Non Accident/test24_10.jpg  \n",
            "  inflating: data/train/Non Accident/test24_11.jpg  \n",
            "  inflating: data/train/Non Accident/test24_12.jpg  \n",
            "  inflating: data/train/Non Accident/test24_14.jpg  \n",
            "  inflating: data/train/Non Accident/test24_15.jpg  \n",
            "  inflating: data/train/Non Accident/test24_16.jpg  \n",
            "  inflating: data/train/Non Accident/test24_17.jpg  \n",
            "  inflating: data/train/Non Accident/test24_18.jpg  \n",
            "  inflating: data/train/Non Accident/test24_19.jpg  \n",
            "  inflating: data/train/Non Accident/test24_2.jpg  \n",
            "  inflating: data/train/Non Accident/test24_20.jpg  \n",
            "  inflating: data/train/Non Accident/test24_3.jpg  \n",
            "  inflating: data/train/Non Accident/test24_4.jpg  \n",
            "  inflating: data/train/Non Accident/test24_5.jpg  \n",
            "  inflating: data/train/Non Accident/test24_6.jpg  \n",
            "  inflating: data/train/Non Accident/test24_7.jpg  \n",
            "  inflating: data/train/Non Accident/test24_9.jpg  \n",
            "  inflating: data/train/Non Accident/test25_11.jpg  \n",
            "  inflating: data/train/Non Accident/test25_12.jpg  \n",
            "  inflating: data/train/Non Accident/test25_13.jpg  \n",
            "  inflating: data/train/Non Accident/test25_14.jpg  \n",
            "  inflating: data/train/Non Accident/test25_15.jpg  \n",
            "  inflating: data/train/Non Accident/test25_16.jpg  \n",
            "  inflating: data/train/Non Accident/test25_18.jpg  \n",
            "  inflating: data/train/Non Accident/test25_2.jpg  \n",
            "  inflating: data/train/Non Accident/test25_3.jpg  \n",
            "  inflating: data/train/Non Accident/test25_4.jpg  \n",
            "  inflating: data/train/Non Accident/test25_6.jpg  \n",
            "  inflating: data/train/Non Accident/test25_7.jpg  \n",
            "  inflating: data/train/Non Accident/test25_8.jpg  \n",
            "  inflating: data/train/Non Accident/test25_9.jpg  \n",
            "  inflating: data/train/Non Accident/test26_1.jpg  \n",
            "  inflating: data/train/Non Accident/test26_10.jpg  \n",
            "  inflating: data/train/Non Accident/test26_3.jpg  \n",
            "  inflating: data/train/Non Accident/test26_4.jpg  \n",
            "  inflating: data/train/Non Accident/test26_6.jpg  \n",
            "  inflating: data/train/Non Accident/test26_7.jpg  \n",
            "  inflating: data/train/Non Accident/test26_9.jpg  \n",
            "  inflating: data/train/Non Accident/test27_1.jpg  \n",
            "  inflating: data/train/Non Accident/test27_2.jpg  \n",
            "  inflating: data/train/Non Accident/test27_3.jpg  \n",
            "  inflating: data/train/Non Accident/test27_4.jpg  \n",
            "  inflating: data/train/Non Accident/test27_59.jpg  \n",
            "  inflating: data/train/Non Accident/test27_6.jpg  \n",
            "  inflating: data/train/Non Accident/test27_60.jpg  \n",
            "  inflating: data/train/Non Accident/test28_11.jpg  \n",
            "  inflating: data/train/Non Accident/test28_12.jpg  \n",
            "  inflating: data/train/Non Accident/test28_2.jpg  \n",
            "  inflating: data/train/Non Accident/test28_7.jpg  \n",
            "  inflating: data/train/Non Accident/test28_8.jpg  \n",
            "  inflating: data/train/Non Accident/test28_9.jpg  \n",
            "  inflating: data/train/Non Accident/test29_1.jpg  \n",
            "  inflating: data/train/Non Accident/test29_16.jpg  \n",
            "  inflating: data/train/Non Accident/test29_17.jpg  \n",
            "  inflating: data/train/Non Accident/test29_2.jpg  \n",
            "  inflating: data/train/Non Accident/test29_20.jpg  \n",
            "  inflating: data/train/Non Accident/test29_21.jpg  \n",
            "  inflating: data/train/Non Accident/test29_23.jpg  \n",
            "  inflating: data/train/Non Accident/test29_24.jpg  \n",
            "  inflating: data/train/Non Accident/test29_29.jpg  \n",
            "  inflating: data/train/Non Accident/test29_30.jpg  \n",
            "  inflating: data/train/Non Accident/test29_31.jpg  \n",
            "  inflating: data/train/Non Accident/test29_4.jpg  \n",
            "  inflating: data/train/Non Accident/test29_5.jpg  \n",
            "  inflating: data/train/Non Accident/test30_1.jpg  \n",
            "  inflating: data/train/Non Accident/test30_2.jpg  \n",
            "  inflating: data/train/Non Accident/test30_3.jpg  \n",
            "  inflating: data/train/Non Accident/test30_4.jpg  \n",
            "  inflating: data/train/Non Accident/test30_6.jpg  \n",
            "  inflating: data/train/Non Accident/test3_13.jpg  \n",
            "  inflating: data/train/Non Accident/test3_14.jpg  \n",
            "  inflating: data/train/Non Accident/test3_15.jpg  \n",
            "  inflating: data/train/Non Accident/test3_16.jpg  \n",
            "  inflating: data/train/Non Accident/test3_17.jpg  \n",
            "  inflating: data/train/Non Accident/test3_19.jpg  \n",
            "  inflating: data/train/Non Accident/test3_20.jpg  \n",
            "  inflating: data/train/Non Accident/test3_22.jpg  \n",
            "  inflating: data/train/Non Accident/test3_23.jpg  \n",
            "  inflating: data/train/Non Accident/test3_24.jpg  \n",
            "  inflating: data/train/Non Accident/test3_34.jpg  \n",
            "  inflating: data/train/Non Accident/test3_35.jpg  \n",
            "  inflating: data/train/Non Accident/test3_36.jpg  \n",
            "  inflating: data/train/Non Accident/test3_37.jpg  \n",
            "  inflating: data/train/Non Accident/test3_38.jpg  \n",
            "  inflating: data/train/Non Accident/test3_39.jpg  \n",
            "  inflating: data/train/Non Accident/test3_4.jpg  \n",
            "  inflating: data/train/Non Accident/test3_41.jpg  \n",
            "  inflating: data/train/Non Accident/test3_42.jpg  \n",
            "  inflating: data/train/Non Accident/test4_1.jpg  \n",
            "  inflating: data/train/Non Accident/test4_12.jpg  \n",
            "  inflating: data/train/Non Accident/test4_13.jpg  \n",
            "  inflating: data/train/Non Accident/test4_15.jpg  \n",
            "  inflating: data/train/Non Accident/test4_16.jpg  \n",
            "  inflating: data/train/Non Accident/test4_17.jpg  \n",
            "  inflating: data/train/Non Accident/test4_18.jpg  \n",
            "  inflating: data/train/Non Accident/test4_20.jpg  \n",
            "  inflating: data/train/Non Accident/test4_22.jpg  \n",
            "  inflating: data/train/Non Accident/test4_23.jpg  \n",
            "  inflating: data/train/Non Accident/test4_24.jpg  \n",
            "  inflating: data/train/Non Accident/test4_25.jpg  \n",
            "  inflating: data/train/Non Accident/test4_26.jpg  \n",
            "  inflating: data/train/Non Accident/test4_27.jpg  \n",
            "  inflating: data/train/Non Accident/test4_29.jpg  \n",
            "  inflating: data/train/Non Accident/test4_3.jpg  \n",
            "  inflating: data/train/Non Accident/test4_30.jpg  \n",
            "  inflating: data/train/Non Accident/test4_51.jpg  \n",
            "  inflating: data/train/Non Accident/test4_52.jpg  \n",
            "  inflating: data/train/Non Accident/test4_54.jpg  \n",
            "  inflating: data/train/Non Accident/test4_55.jpg  \n",
            "  inflating: data/train/Non Accident/test4_56.jpg  \n",
            "  inflating: data/train/Non Accident/test4_58.jpg  \n",
            "  inflating: data/train/Non Accident/test4_59.jpg  \n",
            "  inflating: data/train/Non Accident/test4_7.jpg  \n",
            "  inflating: data/train/Non Accident/test4_8.jpg  \n",
            "  inflating: data/train/Non Accident/test7_11.jpg  \n",
            "  inflating: data/train/Non Accident/test7_12.jpg  \n",
            "  inflating: data/train/Non Accident/test7_13.jpg  \n",
            "  inflating: data/train/Non Accident/test7_14.jpg  \n",
            "  inflating: data/train/Non Accident/test7_15.jpg  \n",
            "  inflating: data/train/Non Accident/test7_16.jpg  \n",
            "  inflating: data/train/Non Accident/test7_17.jpg  \n",
            "  inflating: data/train/Non Accident/test7_18.jpg  \n",
            "  inflating: data/train/Non Accident/test7_19.jpg  \n",
            "  inflating: data/train/Non Accident/test7_2.jpg  \n",
            "  inflating: data/train/Non Accident/test7_20.jpg  \n",
            "  inflating: data/train/Non Accident/test7_21.jpg  \n",
            "  inflating: data/train/Non Accident/test7_23.jpg  \n",
            "  inflating: data/train/Non Accident/test7_24.jpg  \n",
            "  inflating: data/train/Non Accident/test7_3.jpg  \n",
            "  inflating: data/train/Non Accident/test7_33.jpg  \n",
            "  inflating: data/train/Non Accident/test7_34.jpg  \n",
            "  inflating: data/train/Non Accident/test7_35.jpg  \n",
            "  inflating: data/train/Non Accident/test7_36.jpg  \n",
            "  inflating: data/train/Non Accident/test7_4.jpg  \n",
            "  inflating: data/train/Non Accident/test7_40.jpg  \n",
            "  inflating: data/train/Non Accident/test7_41.jpg  \n",
            "  inflating: data/train/Non Accident/test7_42.jpg  \n",
            "  inflating: data/train/Non Accident/test7_44.jpg  \n",
            "  inflating: data/train/Non Accident/test7_45.jpg  \n",
            "  inflating: data/train/Non Accident/test7_46.jpg  \n",
            "  inflating: data/train/Non Accident/test7_47.jpg  \n",
            "  inflating: data/train/Non Accident/test7_48.jpg  \n",
            "  inflating: data/train/Non Accident/test7_49.jpg  \n",
            "  inflating: data/train/Non Accident/test7_5.jpg  \n",
            "  inflating: data/train/Non Accident/test7_50.jpg  \n",
            "  inflating: data/train/Non Accident/test7_51.jpg  \n",
            "  inflating: data/train/Non Accident/test7_52.jpg  \n",
            "  inflating: data/train/Non Accident/test7_58.jpg  \n",
            "  inflating: data/train/Non Accident/test7_59.jpg  \n",
            "  inflating: data/train/Non Accident/test7_6.jpg  \n",
            "  inflating: data/train/Non Accident/test7_60.jpg  \n",
            "  inflating: data/train/Non Accident/test7_7.jpg  \n",
            "  inflating: data/train/Non Accident/test7_8.jpg  \n",
            "  inflating: data/train/Non Accident/test7_9.jpg  \n",
            "  inflating: data/train/Non Accident/test8_1.jpg  \n",
            "  inflating: data/train/Non Accident/test8_10.jpg  \n",
            "  inflating: data/train/Non Accident/test8_17.jpg  \n",
            "  inflating: data/train/Non Accident/test8_18.jpg  \n",
            "  inflating: data/train/Non Accident/test8_19.jpg  \n",
            "  inflating: data/train/Non Accident/test8_2.jpg  \n",
            "  inflating: data/train/Non Accident/test8_20.jpg  \n",
            "  inflating: data/train/Non Accident/test8_21.jpg  \n",
            "  inflating: data/train/Non Accident/test8_4.jpg  \n",
            "  inflating: data/train/Non Accident/test8_5.jpg  \n",
            "  inflating: data/train/Non Accident/test8_6.jpg  \n",
            "  inflating: data/train/Non Accident/test8_7.jpg  \n",
            "  inflating: data/train/Non Accident/test8_8.jpg  \n",
            "  inflating: data/train/Non Accident/test9_1.jpg  \n",
            "  inflating: data/train/Non Accident/test9_10.jpg  \n",
            "  inflating: data/train/Non Accident/test9_11.jpg  \n",
            "  inflating: data/train/Non Accident/test9_13.jpg  \n",
            "  inflating: data/train/Non Accident/test9_14.jpg  \n",
            "  inflating: data/train/Non Accident/test9_16.jpg  \n",
            "  inflating: data/train/Non Accident/test9_17.jpg  \n",
            "  inflating: data/train/Non Accident/test9_18.jpg  \n",
            "  inflating: data/train/Non Accident/test9_19.jpg  \n",
            "  inflating: data/train/Non Accident/test9_2.jpg  \n",
            "  inflating: data/train/Non Accident/test9_21.jpg  \n",
            "  inflating: data/train/Non Accident/test9_22.jpg  \n",
            "  inflating: data/train/Non Accident/test9_23.jpg  \n",
            "  inflating: data/train/Non Accident/test9_24.jpg  \n",
            "  inflating: data/train/Non Accident/test9_3.jpg  \n",
            "  inflating: data/train/Non Accident/test9_4.jpg  \n",
            "  inflating: data/train/Non Accident/test9_5.jpg  \n",
            "  inflating: data/train/Non Accident/test9_7.jpg  \n",
            "  inflating: data/train/Non Accident/test9_9.jpg  \n",
            "  inflating: data/train/Non Accident/test_1.jpg  \n",
            "  inflating: data/train/Non Accident/test_10.jpg  \n",
            "  inflating: data/train/Non Accident/test_11.jpg  \n",
            "  inflating: data/train/Non Accident/test_12.jpg  \n",
            "  inflating: data/train/Non Accident/test_13.jpg  \n",
            "  inflating: data/train/Non Accident/test_14.jpg  \n",
            "  inflating: data/train/Non Accident/test_15.jpg  \n",
            "  inflating: data/train/Non Accident/test_16.jpg  \n",
            "  inflating: data/train/Non Accident/test_18.jpg  \n",
            "  inflating: data/train/Non Accident/test_19.jpg  \n",
            "  inflating: data/train/Non Accident/test_20.jpg  \n",
            "  inflating: data/train/Non Accident/test_21.jpg  \n",
            "  inflating: data/train/Non Accident/test_23.jpg  \n",
            "  inflating: data/train/Non Accident/test_24.jpg  \n",
            "  inflating: data/train/Non Accident/test_25.jpg  \n",
            "  inflating: data/train/Non Accident/test_3.jpg  \n",
            "  inflating: data/train/Non Accident/test_4.jpg  \n",
            "  inflating: data/train/Non Accident/test_46.jpg  \n",
            "  inflating: data/train/Non Accident/test_5.jpg  \n",
            "  inflating: data/train/Non Accident/test_6.jpg  \n",
            "  inflating: data/train/Non Accident/test_7.jpg  \n",
            "  inflating: data/train/Non Accident/test_8.jpg  \n",
            "  inflating: data/train/Non Accident/test_9.jpg  \n",
            "  inflating: data/val/Accident/acc1 (4).jpg  \n",
            "  inflating: data/val/Accident/acc1 (6).jpg  \n",
            "  inflating: data/val/Accident/test10_22.jpg  \n",
            "  inflating: data/val/Accident/test10_23.jpg  \n",
            "  inflating: data/val/Accident/test10_27.jpg  \n",
            "  inflating: data/val/Accident/test10_34.jpg  \n",
            "  inflating: data/val/Accident/test10_36.jpg  \n",
            "  inflating: data/val/Accident/test10_54.jpg  \n",
            "  inflating: data/val/Accident/test13_18.jpg  \n",
            "  inflating: data/val/Accident/test13_20.jpg  \n",
            "  inflating: data/val/Accident/test14_11.jpg  \n",
            "  inflating: data/val/Accident/test14_19.jpg  \n",
            "  inflating: data/val/Accident/test15_9.jpg  \n",
            "  inflating: data/val/Accident/test16_28.jpg  \n",
            "  inflating: data/val/Accident/test18_25.jpg  \n",
            "  inflating: data/val/Accident/test21_22.jpg  \n",
            "  inflating: data/val/Accident/test22_27.jpg  \n",
            "  inflating: data/val/Accident/test23_15.jpg  \n",
            "  inflating: data/val/Accident/test23_18.jpg  \n",
            "  inflating: data/val/Accident/test24_41.jpg  \n",
            "  inflating: data/val/Accident/test25_31.jpg  \n",
            "  inflating: data/val/Accident/test26_12.jpg  \n",
            "  inflating: data/val/Accident/test26_15.jpg  \n",
            "  inflating: data/val/Accident/test26_22.jpg  \n",
            "  inflating: data/val/Accident/test26_26.jpg  \n",
            "  inflating: data/val/Accident/test27_17.jpg  \n",
            "  inflating: data/val/Accident/test27_18.jpg  \n",
            "  inflating: data/val/Accident/test27_21.jpg  \n",
            "  inflating: data/val/Accident/test27_26.jpg  \n",
            "  inflating: data/val/Accident/test27_35.jpg  \n",
            "  inflating: data/val/Accident/test27_9.jpg  \n",
            "  inflating: data/val/Accident/test28_18.jpg  \n",
            "  inflating: data/val/Accident/test28_29.jpg  \n",
            "  inflating: data/val/Accident/test28_31.jpg  \n",
            "  inflating: data/val/Accident/test29_15.jpg  \n",
            "  inflating: data/val/Accident/test2_23.jpg  \n",
            "  inflating: data/val/Accident/test30_13.jpg  \n",
            "  inflating: data/val/Accident/test3_26.jpg  \n",
            "  inflating: data/val/Accident/test4_47.jpg  \n",
            "  inflating: data/val/Accident/test7_32.jpg  \n",
            "  inflating: data/val/Accident/test_26.jpg  \n",
            "  inflating: data/val/Accident/test_30.jpg  \n",
            "  inflating: data/val/Accident/test_35.jpg  \n",
            "  inflating: data/val/Accident/test_37.jpg  \n",
            "  inflating: data/val/Accident/test_41.jpg  \n",
            "  inflating: data/val/Accident/test_45.jpg  \n",
            "  inflating: data/val/Non Accident/5_16.jpg  \n",
            "  inflating: data/val/Non Accident/5_22.jpg  \n",
            "  inflating: data/val/Non Accident/5_26.jpg  \n",
            "  inflating: data/val/Non Accident/test10_1.jpg  \n",
            "  inflating: data/val/Non Accident/test10_3.jpg  \n",
            "  inflating: data/val/Non Accident/test11_49.jpg  \n",
            "  inflating: data/val/Non Accident/test14_3.jpg  \n",
            "  inflating: data/val/Non Accident/test14_5.jpg  \n",
            "  inflating: data/val/Non Accident/test15_18.jpg  \n",
            "  inflating: data/val/Non Accident/test15_27.jpg  \n",
            "  inflating: data/val/Non Accident/test16_12.jpg  \n",
            "  inflating: data/val/Non Accident/test17_29.jpg  \n",
            "  inflating: data/val/Non Accident/test18_12.jpg  \n",
            "  inflating: data/val/Non Accident/test18_6.jpg  \n",
            "  inflating: data/val/Non Accident/test20_7.jpg  \n",
            "  inflating: data/val/Non Accident/test22_17.jpg  \n",
            "  inflating: data/val/Non Accident/test22_19.jpg  \n",
            "  inflating: data/val/Non Accident/test24_1.jpg  \n",
            "  inflating: data/val/Non Accident/test24_13.jpg  \n",
            "  inflating: data/val/Non Accident/test24_8.jpg  \n",
            "  inflating: data/val/Non Accident/test25_10.jpg  \n",
            "  inflating: data/val/Non Accident/test25_17.jpg  \n",
            "  inflating: data/val/Non Accident/test25_22.jpg  \n",
            "  inflating: data/val/Non Accident/test25_5.jpg  \n",
            "  inflating: data/val/Non Accident/test26_11.jpg  \n",
            "  inflating: data/val/Non Accident/test26_2.jpg  \n",
            "  inflating: data/val/Non Accident/test26_8.jpg  \n",
            "  inflating: data/val/Non Accident/test28_13.jpg  \n",
            "  inflating: data/val/Non Accident/test28_14.jpg  \n",
            "  inflating: data/val/Non Accident/test29_18.jpg  \n",
            "  inflating: data/val/Non Accident/test29_22.jpg  \n",
            "  inflating: data/val/Non Accident/test30_5.jpg  \n",
            "  inflating: data/val/Non Accident/test3_25.jpg  \n",
            "  inflating: data/val/Non Accident/test3_5.jpg  \n",
            "  inflating: data/val/Non Accident/test4_14.jpg  \n",
            "  inflating: data/val/Non Accident/test4_19.jpg  \n",
            "  inflating: data/val/Non Accident/test4_2.jpg  \n",
            "  inflating: data/val/Non Accident/test4_21.jpg  \n",
            "  inflating: data/val/Non Accident/test4_5.jpg  \n",
            "  inflating: data/val/Non Accident/test4_57.jpg  \n",
            "  inflating: data/val/Non Accident/test7_1.jpg  \n",
            "  inflating: data/val/Non Accident/test7_37.jpg  \n",
            "  inflating: data/val/Non Accident/test7_43.jpg  \n",
            "  inflating: data/val/Non Accident/test8_23.jpg  \n",
            "  inflating: data/val/Non Accident/test8_24.jpg  \n",
            "  inflating: data/val/Non Accident/test8_9.jpg  \n",
            "  inflating: data/val/Non Accident/test9_12.jpg  \n",
            "  inflating: data/val/Non Accident/test9_15.jpg  \n",
            "  inflating: data/val/Non Accident/test9_6.jpg  \n",
            "  inflating: data/val/Non Accident/test9_8.jpg  \n",
            "  inflating: data/val/Non Accident/test_17.jpg  \n",
            "  inflating: data/val/Non Accident/test_22.jpg  \n"
          ]
        }
      ],
      "source": [
        "!unzip accident-detection-from-cctv-footage.zip\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train_dir = '/kaggle/input/accident-detection-from-cctv-footage/data/train'\n",
        "test_dir = '/kaggle/input/accident-detection-from-cctv-footage/data/test'\n",
        "val_dir = '/kaggle/input/accident-detection-from-cctv-footage/data/val'\n",
        "\n",
        "print(os.path.exists(train_dir))\n",
        "print(os.path.exists(test_dir))\n",
        "print(os.path.exists(val_dir))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K9vUoTWxzWvg",
        "outputId": "87618cef-d845-45c4-887f-94fe684a1f40"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False\n",
            "False\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "r-OX4taGVOcC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "98df9d50-e0a8-45e2-b5db-3f69eb50aa3d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 791 files belonging to 2 classes.\n",
            "Found 100 files belonging to 2 classes.\n",
            "Found 98 files belonging to 2 classes.\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "# Veri setinin yükseklik ve genişliği\n",
        "img_height = 180\n",
        "img_width = 180\n",
        "\n",
        "# Batch boyutu\n",
        "batch_size = 32\n",
        "\n",
        "# Train veri seti\n",
        "training_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/content/data/train',\n",
        "    seed=101,\n",
        "    image_size=(img_height, img_width),\n",
        "    batch_size=batch_size\n",
        ")\n",
        "\n",
        "# Test veri seti\n",
        "testing_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/content/data/test',\n",
        "    seed=101,\n",
        "    image_size=(img_height, img_width),\n",
        "    batch_size=batch_size\n",
        ")\n",
        "\n",
        "# Val veri seti\n",
        "validation_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/content/data/val',\n",
        "    seed=101,\n",
        "    image_size=(img_height, img_width),\n",
        "    batch_size=batch_size\n",
        ")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Yeni Bölüm"
      ],
      "metadata": {
        "id": "V7MJyoOdHq5P"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 356
        },
        "id": "7zVzvBSPN93h",
        "outputId": "96d0e314-6bdf-4681-98a3-3a78443495f8"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NotFoundError",
          "evalue": "Could not find directory /kaggle/input/accident-detection-from-cctv-footage/data/train",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNotFoundError\u001b[0m                             Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-ece4ea23d4f5>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m training_ds = tf.keras.preprocessing.image_dataset_from_directory(\n\u001b[0m\u001b[1;32m      2\u001b[0m     \u001b[0;34m'/kaggle/input/accident-detection-from-cctv-footage/data/train'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mseed\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m101\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mimage_size\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mimg_height\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimg_width\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/image_dataset.py\u001b[0m in \u001b[0;36mimage_dataset_from_directory\u001b[0;34m(directory, labels, label_mode, class_names, color_mode, batch_size, image_size, shuffle, seed, validation_split, subset, interpolation, follow_links, crop_to_aspect_ratio, **kwargs)\u001b[0m\n\u001b[1;32m    211\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mseed\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m         \u001b[0mseed\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1e6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 213\u001b[0;31m     image_paths, labels, class_names = dataset_utils.index_directory(\n\u001b[0m\u001b[1;32m    214\u001b[0m         \u001b[0mdirectory\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m         \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/dataset_utils.py\u001b[0m in \u001b[0;36mindex_directory\u001b[0;34m(directory, labels, formats, class_names, shuffle, seed, follow_links)\u001b[0m\n\u001b[1;32m    540\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    541\u001b[0m         \u001b[0msubdirs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 542\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0msubdir\u001b[0m \u001b[0;32min\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirectory\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    543\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirectory\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msubdir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    544\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0msubdir\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\".\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/lib/io/file_io.py\u001b[0m in \u001b[0;36mlist_directory_v2\u001b[0;34m(path)\u001b[0m\n\u001b[1;32m    766\u001b[0m   \"\"\"\n\u001b[1;32m    767\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_directory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 768\u001b[0;31m     raise errors.NotFoundError(\n\u001b[0m\u001b[1;32m    769\u001b[0m         \u001b[0mnode_def\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    770\u001b[0m         \u001b[0mop\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNotFoundError\u001b[0m: Could not find directory /kaggle/input/accident-detection-from-cctv-footage/data/train"
          ]
        }
      ],
      "source": [
        "training_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/kaggle/input/accident-detection-from-cctv-footage/data/train',\n",
        "    seed=101,\n",
        "    image_size= (img_height, img_width),\n",
        "    batch_size=batch_size\n",
        "\n",
        ")\n",
        "\n",
        "testing_ds = tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/kaggle/input/accident-detection-from-cctv-footage/data/test',\n",
        "    seed=101,\n",
        "    image_size= (img_height, img_width),\n",
        "    batch_size=batch_size)\n",
        "\n",
        "validation_ds =  tf.keras.preprocessing.image_dataset_from_directory(\n",
        "    '/kaggle/input/accident-detection-from-cctv-footage/data/val',\n",
        "    seed=101,\n",
        "    image_size= (img_height, img_width),\n",
        "    batch_size=batch_size)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "nFBll-7PN-Au"
      },
      "outputs": [],
      "source": [
        "class_names = training_ds.class_names\n",
        "\n",
        "## Configuring dataset for performance\n",
        "AUTOTUNE = tf.data.experimental.AUTOTUNE\n",
        "training_ds = training_ds.cache().prefetch(buffer_size=AUTOTUNE)\n",
        "testing_ds = testing_ds.cache().prefetch(buffer_size=AUTOTUNE)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "4knTANArN-Im"
      },
      "outputs": [],
      "source": [
        "from keras.applications.vgg16 import VGG16"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "TmIhFnSdN-P2"
      },
      "outputs": [],
      "source": [
        "img_shape = (img_height, img_width, 3)\n",
        "\n",
        "base_model = tf.keras.applications.VGG16(input_shape=img_shape,\n",
        "                                               include_top=False,\n",
        "                                               weights='imagenet')\n",
        "\n",
        "base_model.trainable = False"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "id": "WxdcYOhHN6oW"
      },
      "outputs": [],
      "source": [
        "\n",
        "\n",
        "# Model oluşturma\n",
        "model = tf.keras.Sequential([\n",
        "    base_model,\n",
        "    layers.Conv2D(32, 3, activation='relu', strides=(1, 1), padding='same'),\n",
        "    layers.Conv2D(64, 3, activation='relu', strides=(1, 1), padding='same'),\n",
        "    layers.Conv2D(128, 3, activation='relu', strides=(1, 1), padding='same'),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(len(class_names), activation='softmax')\n",
        "])\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "id": "4xtWvDfaOY01"
      },
      "outputs": [],
      "source": [
        "model.compile(optimizer='adam',loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# Veri yolu\n",
        "train_data_dir = '/content/data/train'\n",
        "validation_data_dir = '/content/data/val'\n",
        "\n",
        "\n",
        "\n",
        "train_datagen = ImageDataGenerator(rescale=1./255)\n",
        "validation_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "# Eğitim verisi\n",
        "train_generator = train_datagen.flow_from_directory(\n",
        "        train_data_dir,\n",
        "        target_size=(img_height, img_width),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='binary')  # Sınıflar 0 ve 1 olduğundan class_mode='binary'\n",
        "\n",
        "# Doğrulama verisi\n",
        "validation_generator = validation_datagen.flow_from_directory(\n",
        "        validation_data_dir,\n",
        "        target_size=(img_height, img_width),\n",
        "        batch_size=batch_size,\n",
        "        class_mode='binary')  # Sınıflar 0 ve 1 olduğundan class_mode='binary'\n",
        "\n",
        "# Model oluşturma\n",
        "model = tf.keras.Sequential([\n",
        "    base_model,\n",
        "    layers.Conv2D(32, 3, activation='relu', strides=(1, 1), padding='same'),\n",
        "    layers.Conv2D(64, 3, activation='relu', strides=(1, 1), padding='same'),\n",
        "    layers.Conv2D(128, 3, activation='relu', strides=(1, 1), padding='same'),\n",
        "    layers.Flatten(),\n",
        "    layers.Dense(1, activation='sigmoid')  # Sınıf sayısı 1, çünkü ikili sınıflandırma yapılıyor\n",
        "])\n",
        "\n",
        "# Modeli derleme\n",
        "model.compile(optimizer='adam',\n",
        "              loss='binary_crossentropy',  # Kayıp fonksiyonu binary_crossentropy\n",
        "              metrics=['accuracy'])\n",
        "batch_size=32,\n",
        "\n",
        "# Modeli eğitme\n",
        "history = model.fit(\n",
        "    train_generator,\n",
        "    steps_per_epoch=train_generator.samples // batch_size,\n",
        "    epochs=20,\n",
        "    validation_data=validation_generator,\n",
        "    validation_steps=validation_generator.samples // batch_size)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XSNnywfU4wAK",
        "outputId": "55e72375-7bde-46de-de2f-ca0b20c72544"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 791 images belonging to 2 classes.\n",
            "Found 98 images belonging to 2 classes.\n",
            "Epoch 1/20\n",
            "24/24 [==============================] - 148s 5s/step - loss: 0.6003 - accuracy: 0.7049 - val_loss: 1.1959 - val_accuracy: 0.5208\n",
            "Epoch 2/20\n",
            "24/24 [==============================] - 127s 5s/step - loss: 0.4031 - accuracy: 0.8340 - val_loss: 1.0638 - val_accuracy: 0.5208\n",
            "Epoch 3/20\n",
            "24/24 [==============================] - 128s 5s/step - loss: 0.3477 - accuracy: 0.8656 - val_loss: 0.9781 - val_accuracy: 0.5208\n",
            "Epoch 4/20\n",
            "24/24 [==============================] - 125s 5s/step - loss: 0.3712 - accuracy: 0.8445 - val_loss: 0.8343 - val_accuracy: 0.5000\n",
            "Epoch 5/20\n",
            "24/24 [==============================] - 125s 5s/step - loss: 0.3211 - accuracy: 0.8709 - val_loss: 2.8892 - val_accuracy: 0.5208\n",
            "Epoch 6/20\n",
            "24/24 [==============================] - 126s 5s/step - loss: 0.2540 - accuracy: 0.8999 - val_loss: 2.0798 - val_accuracy: 0.5312\n",
            "Epoch 7/20\n",
            "24/24 [==============================] - 125s 5s/step - loss: 0.2387 - accuracy: 0.9117 - val_loss: 1.1257 - val_accuracy: 0.5312\n",
            "Epoch 8/20\n",
            "24/24 [==============================] - 129s 5s/step - loss: 0.2064 - accuracy: 0.9183 - val_loss: 1.6366 - val_accuracy: 0.5521\n",
            "Epoch 9/20\n",
            "24/24 [==============================] - 128s 5s/step - loss: 0.1826 - accuracy: 0.9354 - val_loss: 1.4325 - val_accuracy: 0.5729\n",
            "Epoch 10/20\n",
            "24/24 [==============================] - 126s 5s/step - loss: 0.1741 - accuracy: 0.9433 - val_loss: 1.9685 - val_accuracy: 0.5417\n",
            "Epoch 11/20\n",
            "24/24 [==============================] - 135s 6s/step - loss: 0.1274 - accuracy: 0.9539 - val_loss: 2.6554 - val_accuracy: 0.5417\n",
            "Epoch 12/20\n",
            "24/24 [==============================] - 129s 5s/step - loss: 0.1308 - accuracy: 0.9552 - val_loss: 2.8188 - val_accuracy: 0.5000\n",
            "Epoch 13/20\n",
            "24/24 [==============================] - 129s 5s/step - loss: 0.1276 - accuracy: 0.9460 - val_loss: 2.1730 - val_accuracy: 0.5208\n",
            "Epoch 14/20\n",
            "24/24 [==============================] - 125s 5s/step - loss: 0.1915 - accuracy: 0.9433 - val_loss: 1.7812 - val_accuracy: 0.5312\n",
            "Epoch 15/20\n",
            "24/24 [==============================] - 128s 5s/step - loss: 0.1354 - accuracy: 0.9486 - val_loss: 1.0547 - val_accuracy: 0.5417\n",
            "Epoch 16/20\n",
            "24/24 [==============================] - 126s 5s/step - loss: 0.1609 - accuracy: 0.9460 - val_loss: 1.0318 - val_accuracy: 0.5312\n",
            "Epoch 17/20\n",
            "24/24 [==============================] - 125s 5s/step - loss: 0.1670 - accuracy: 0.9473 - val_loss: 2.7926 - val_accuracy: 0.5417\n",
            "Epoch 18/20\n",
            "24/24 [==============================] - 120s 5s/step - loss: 0.0570 - accuracy: 0.9816 - val_loss: 3.9196 - val_accuracy: 0.5312\n",
            "Epoch 19/20\n",
            "24/24 [==============================] - 126s 5s/step - loss: 0.0517 - accuracy: 0.9789 - val_loss: 4.2893 - val_accuracy: 0.5417\n",
            "Epoch 20/20\n",
            "24/24 [==============================] - 125s 5s/step - loss: 0.0547 - accuracy: 0.9829 - val_loss: 2.4843 - val_accuracy: 0.5417\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "id": "NwH5pWRKOY-w",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "8f46acb2-f8d6-4c5a-dd96-9cc11ba1e0b0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "InvalidArgumentError",
          "evalue": "Graph execution error:\n\nDetected at node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits defined at (most recent call last):\n  File \"/usr/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n\n  File \"/usr/lib/python3.10/runpy.py\", line 86, in _run_code\n\n  File \"/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n\n  File \"/usr/local/lib/python3.10/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelapp.py\", line 619, in start\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/platform/asyncio.py\", line 195, in start\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n\n  File \"/usr/lib/python3.10/asyncio/events.py\", line 80, in _run\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 685, in <lambda>\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 738, in _run_callback\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 825, in inner\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 361, in process_one\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 261, in dispatch_shell\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 539, in execute_request\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py\", line 302, in do_execute\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/zmqshell.py\", line 539, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n\n  File \"<ipython-input-41-eb269a8af2fd>\", line 1, in <cell line: 1>\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1807, in fit\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1401, in train_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1384, in step_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1373, in run_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1151, in train_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1209, in compute_loss\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/compile_utils.py\", line 277, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 143, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 270, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 2454, in sparse_categorical_crossentropy\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/backend.py\", line 5775, in sparse_categorical_crossentropy\n\nReceived a label value of 1 which is outside the valid range of [0, 1).  Label values: 0 1 1 1 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 0 0 1 0 1 1 1 0 1 0 1 0 1\n\t [[{{node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits}}]] [Op:__inference_train_function_24893]",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-41-eb269a8af2fd>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mhistory\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtraining_ds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalidation_ds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     51\u001b[0m   \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     54\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     55\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mInvalidArgumentError\u001b[0m: Graph execution error:\n\nDetected at node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits defined at (most recent call last):\n  File \"/usr/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n\n  File \"/usr/lib/python3.10/runpy.py\", line 86, in _run_code\n\n  File \"/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n\n  File \"/usr/local/lib/python3.10/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelapp.py\", line 619, in start\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/platform/asyncio.py\", line 195, in start\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n\n  File \"/usr/lib/python3.10/asyncio/events.py\", line 80, in _run\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 685, in <lambda>\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 738, in _run_callback\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 825, in inner\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 361, in process_one\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 261, in dispatch_shell\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 539, in execute_request\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py\", line 302, in do_execute\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/zmqshell.py\", line 539, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n\n  File \"<ipython-input-41-eb269a8af2fd>\", line 1, in <cell line: 1>\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1807, in fit\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1401, in train_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1384, in step_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1373, in run_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1151, in train_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1209, in compute_loss\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/compile_utils.py\", line 277, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 143, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 270, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 2454, in sparse_categorical_crossentropy\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/backend.py\", line 5775, in sparse_categorical_crossentropy\n\nReceived a label value of 1 which is outside the valid range of [0, 1).  Label values: 0 1 1 1 1 0 0 0 1 0 1 0 1 1 1 0 1 1 1 0 0 1 0 1 1 1 0 1 0 1 0 1\n\t [[{{node sparse_categorical_crossentropy/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits}}]] [Op:__inference_train_function_24893]"
          ]
        }
      ],
      "source": [
        "#history = model.fit(training_ds, validation_data = validation_ds, epochs = 50)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "id": "qriZoYuJOZCo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "638d045e-bbfa-494b-9ca7-3226c36eb8b5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7c262dbe28c0>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(history.history['loss'], label = 'training loss')\n",
        "plt.plot(history.history['accuracy'], label = 'training accuracy')\n",
        "plt.grid(True)\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "EhkLt0xYEO_Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "dFQS958HOZFT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "outputId": "7750dd55-060a-4144-87c7-3e0a20431f97"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7c263d209270>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "plt.plot(history.history['val_loss'], label = 'validation loss')\n",
        "plt.plot(history.history['val_accuracy'], label = 'validation accuracy')\n",
        "plt.grid(True)\n",
        "plt.legend()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "9hhrDfBuOZSG",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "outputId": "97a2a756-4d7b-4c6a-bcda-abab99db13bd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 2s 2s/step\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "can only concatenate str (not \"ellipsis\") to str",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-47-84ac8d06cdac>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0;31m# Display predicted and actual labels along with accuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 23\u001b[0;31m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Pred: '\u001b[0m\u001b[0;34m+\u001b[0m \u001b[0mpredlabel\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m' actl:'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mclass_names\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34mf'\\nAccuracy: {AccuracyVector[i]}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'off'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"ellipsis\") to str"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 3000x3000 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "AccuracyVector = []\n",
        "\n",
        "plt.figure(figsize=(30, 30))\n",
        "for images, labels in testing_ds.take(1):\n",
        "    predictions = model.predict(images)\n",
        "    predlabel = []\n",
        "    prdlbl = []\n",
        "\n",
        "    for mem in predictions:\n",
        "        predlabel.append(class_names[np.argmax(mem)])\n",
        "        prdlbl.append(np.argmax(mem))\n",
        "\n",
        "    AccuracyVector = np.array(prdlbl) == labels\n",
        "\n",
        "    # Calculate accuracy\n",
        "    accuracy = np.mean(AccuracyVector)\n",
        "\n",
        "    for i in range(40):\n",
        "        ax = plt.subplot(10, 4, i + 1)\n",
        "        plt.imshow(images[i].numpy().astype(\"uint8\"))\n",
        "\n",
        "        # Display predicted and actual labels along with accuracy\n",
        "        plt.title('Pred: '+ predlabel[i]+' actl:'+class_names[labels[i]] + f'\\nAccuracy: {AccuracyVector[i]}')\n",
        "\n",
        "        plt.axis('off')\n",
        "        plt.grid(True)\n",
        "\n",
        "# Display overall accuracy\n",
        "plt.suptitle(f'Overall Accuracy: {accuracy:.2%}', fontsize=20)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gW8wckarOozt"
      },
      "outputs": [],
      "source": [
        "# Confusion Matrix\n",
        "\n",
        "truePositive=0\n",
        "trueNegative=0\n",
        "falsePositive=0\n",
        "falseNegative=0\n",
        "#positive event is accident negative event is non accident\n",
        "for i in range(0,100):\n",
        "    if(predlabel[i]==class_names[labels[i]] and predlabel[i]=='Accident'):\n",
        "        truePositive+=1\n",
        "    elif(predlabel[i]==class_names[labels[i]] and predlabel[i]=='Non Accident'):\n",
        "        trueNegative+=1\n",
        "    elif(predlabel[i]=='Non Accident' and class_names[labels[i]]=='Accident'):\n",
        "        falseNegative+=1\n",
        "    else:\n",
        "        falsePositive+=1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WH8mBQNhOo9x"
      },
      "outputs": [],
      "source": [
        "print(f'True positives are: {truePositive}')\n",
        "print(f'True negatives are: {trueNegative}')\n",
        "print(f'False negatives are: {falseNegative}')\n",
        "print(f'False positives are: {falsePositive}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dyrM7RYrOzNM"
      },
      "outputs": [],
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "true_positives = 46\n",
        "true_negatives = 53\n",
        "false_negatives = 1\n",
        "false_positives = 0\n",
        "\n",
        "confusion_mat = confusion_matrix([1, 0, 1, 0], [1, 0, 0, 1],\n",
        "                                  labels=[1, 0],\n",
        "                                  sample_weight=[true_positives, true_negatives, false_positives, false_negatives])\n",
        "\n",
        "labels = ['Positive', 'Negative']\n",
        "\n",
        "sns.set()\n",
        "plt.figure(figsize=(7, 5))\n",
        "sns.heatmap(confusion_mat, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels)\n",
        "plt.xlabel('Predicted Labels')\n",
        "plt.ylabel('True Labels')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZDJe6gvFOzRT"
      },
      "outputs": [],
      "source": [
        "from keras.utils.vis_utils import plot_model\n",
        "plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "All_0ozGOze3"
      },
      "outputs": [],
      "source": [
        "print(class_names)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fJRDXiAAOzll"
      },
      "outputs": [],
      "source": [
        "def predict_frame(img):\n",
        "    img_array = tf.keras.utils.img_to_array(img)\n",
        "    img_batch = np.expand_dims(img_array, axis=0)\n",
        "    prediction=(model.predict(img_batch) > 0.5).astype(\"int32\")\n",
        "    if(prediction[0][0]==0):\n",
        "        return(\"Accident Detected\")\n",
        "    else:\n",
        "        return(\"No Accident\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YQv7SNeFOzsv"
      },
      "outputs": [],
      "source": [
        "import cv2\n",
        "image=[]\n",
        "label=[]\n",
        "\n",
        "c=1\n",
        "cap= cv2.VideoCapture('/kaggle/input/cctvfootagevideo/videoplayback (online-video-cutter.com).mp4')\n",
        "while True:\n",
        "    grabbed, frame = cap.read()\n",
        "    if c%30==0:\n",
        "        print(c)\n",
        "        resized_frame=tf.keras.preprocessing.image.smart_resize(frame, (img_height, img_width), interpolation='bilinear')\n",
        "        image.append(frame)\n",
        "        label.append(predict_frame(resized_frame))\n",
        "        if(len(image)==75):\n",
        "            break\n",
        "    c+=1\n",
        "\n",
        "cap.release()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "u--casBFPNE_"
      },
      "outputs": [],
      "source": [
        "print(label[20])\n",
        "print(plt.imshow(image[20]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ibb7uhAcPNM4"
      },
      "outputs": [],
      "source": [
        "model.save('model.h5')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z4Ii-Qu_PNSM"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wwXttH48PNbB"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "mount_file_id": "1TCuhV6QV7-SRW_cg1u3QqxzXSkPxTy_O",
      "authorship_tag": "ABX9TyNwIxAGAuVj8Vl8fAG+549j",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
